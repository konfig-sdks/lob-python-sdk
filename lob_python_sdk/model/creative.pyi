# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class Creative(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_2(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "metadata",
                    "date_created",
                    "resource_type",
                    "description",
                    "template_preview_urls",
                    "deleted",
                    "template_previews",
                    "campaigns",
                    "date_modified",
                    "details",
                    "from",
                    "id",
                    "object",
                }
                
                class properties:
                    deleted = schemas.BoolSchema
                
                    @staticmethod
                    def id() -> typing.Type['CrvId']:
                        return CrvId
                    template_preview_urls = schemas.DictSchema
                    
                    
                    class template_previews(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.DictSchema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'template_previews':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                
                    @staticmethod
                    def campaigns() -> typing.Type['CampaignList']:
                        return CampaignList
                    
                    
                    class object(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def CREATIVE(cls):
                            return cls("creative")
                    __annotations__ = {
                        "deleted": deleted,
                        "id": id,
                        "template_preview_urls": template_preview_urls,
                        "template_previews": template_previews,
                        "campaigns": campaigns,
                        "object": object,
                    }
            
            metadata: schemas.AnyTypeSchema
            date_created: schemas.AnyTypeSchema
            resource_type: schemas.AnyTypeSchema
            description: schemas.AnyTypeSchema
            template_preview_urls: MetaOapg.properties.template_preview_urls
            deleted: MetaOapg.properties.deleted
            template_previews: MetaOapg.properties.template_previews
            campaigns: 'CampaignList'
            date_modified: schemas.AnyTypeSchema
            details: schemas.AnyTypeSchema
            id: 'CrvId'
            object: MetaOapg.properties.object
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'CrvId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["template_preview_urls"]) -> MetaOapg.properties.template_preview_urls: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["template_previews"]) -> MetaOapg.properties.template_previews: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["campaigns"]) -> 'CampaignList': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["deleted", "id", "template_preview_urls", "template_previews", "campaigns", "object", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'CrvId': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["template_preview_urls"]) -> MetaOapg.properties.template_preview_urls: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["template_previews"]) -> MetaOapg.properties.template_previews: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["campaigns"]) -> 'CampaignList': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deleted", "id", "template_preview_urls", "template_previews", "campaigns", "object", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                metadata: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                date_created: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                resource_type: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                description: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                template_preview_urls: typing.Union[MetaOapg.properties.template_preview_urls, dict, frozendict.frozendict, ],
                deleted: typing.Union[MetaOapg.properties.deleted, bool, ],
                template_previews: typing.Union[MetaOapg.properties.template_previews, list, tuple, ],
                campaigns: 'CampaignList',
                date_modified: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                details: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                id: 'CrvId',
                object: typing.Union[MetaOapg.properties.object, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    metadata=metadata,
                    date_created=date_created,
                    resource_type=resource_type,
                    description=description,
                    template_preview_urls=template_preview_urls,
                    deleted=deleted,
                    template_previews=template_previews,
                    campaigns=campaigns,
                    date_modified=date_modified,
                    details=details,
                    id=id,
                    object=object,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                LobBase,
                ReturnedResource,
                cls.all_of_2,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Creative':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.campaign_list import CampaignList
from lob_python_sdk.model.crv_id import CrvId
from lob_python_sdk.model.lob_base import LobBase
from lob_python_sdk.model.returned_resource import ReturnedResource
