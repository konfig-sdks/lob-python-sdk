# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class TemplateVersion(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_2(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "id",
                }
                
                class properties:
                
                    @staticmethod
                    def id() -> typing.Type['VrsnId']:
                        return VrsnId
                    suggest_json_editor = schemas.BoolSchema
                    merge_variables = schemas.DictSchema
                    
                    
                    class object(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def VERSION(cls):
                            return cls("version")
                    __annotations__ = {
                        "id": id,
                        "suggest_json_editor": suggest_json_editor,
                        "merge_variables": merge_variables,
                        "object": object,
                    }
            
            id: 'VrsnId'
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'VrsnId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["suggest_json_editor"]) -> MetaOapg.properties.suggest_json_editor: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["merge_variables"]) -> MetaOapg.properties.merge_variables: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "suggest_json_editor", "merge_variables", "object", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'VrsnId': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["suggest_json_editor"]) -> typing.Union[MetaOapg.properties.suggest_json_editor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["merge_variables"]) -> typing.Union[MetaOapg.properties.merge_variables, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "suggest_json_editor", "merge_variables", "object", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                id: 'VrsnId',
                suggest_json_editor: typing.Union[MetaOapg.properties.suggest_json_editor, bool, schemas.Unset] = schemas.unset,
                merge_variables: typing.Union[MetaOapg.properties.merge_variables, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    id=id,
                    suggest_json_editor=suggest_json_editor,
                    merge_variables=merge_variables,
                    object=object,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                TemplateVersionWritable,
                LobBase,
                cls.all_of_2,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TemplateVersion':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.lob_base import LobBase
from lob_python_sdk.model.template_version_writable import TemplateVersionWritable
from lob_python_sdk.model.vrsn_id import VrsnId
