# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class TemplateWritable(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "html",
        }
        
        class properties:
        
            @staticmethod
            def html() -> typing.Type['TemplateHtml']:
                return TemplateHtml
        
            @staticmethod
            def description() -> typing.Type['ResourceDescription']:
                return ResourceDescription
        
            @staticmethod
            def metadata() -> typing.Type['Metadata']:
                return Metadata
        
            @staticmethod
            def engine() -> typing.Type['Engine']:
                return Engine
        
            @staticmethod
            def required_vars() -> typing.Type['TemplateRequiredVars']:
                return TemplateRequiredVars
            __annotations__ = {
                "html": html,
                "description": description,
                "metadata": metadata,
                "engine": engine,
                "required_vars": required_vars,
            }
    
    html: 'TemplateHtml'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html"]) -> 'TemplateHtml': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'ResourceDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'Metadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engine"]) -> 'Engine': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_vars"]) -> 'TemplateRequiredVars': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["html", "description", "metadata", "engine", "required_vars", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html"]) -> 'TemplateHtml': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['ResourceDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['Metadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engine"]) -> typing.Union['Engine', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_vars"]) -> typing.Union['TemplateRequiredVars', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["html", "description", "metadata", "engine", "required_vars", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        html: 'TemplateHtml',
        description: typing.Union['ResourceDescription', schemas.Unset] = schemas.unset,
        metadata: typing.Union['Metadata', schemas.Unset] = schemas.unset,
        engine: typing.Union['Engine', schemas.Unset] = schemas.unset,
        required_vars: typing.Union['TemplateRequiredVars', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TemplateWritable':
        return super().__new__(
            cls,
            *args,
            html=html,
            description=description,
            metadata=metadata,
            engine=engine,
            required_vars=required_vars,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.engine import Engine
from lob_python_sdk.model.metadata import Metadata
from lob_python_sdk.model.resource_description import ResourceDescription
from lob_python_sdk.model.template_html import TemplateHtml
from lob_python_sdk.model.template_required_vars import TemplateRequiredVars
