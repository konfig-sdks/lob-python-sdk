# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class UploadUpdatable(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            originalFilename = schemas.StrSchema
        
            @staticmethod
            def requiredAddressColumnMapping() -> typing.Type['RequiredAddressColumnMapping']:
                return RequiredAddressColumnMapping
        
            @staticmethod
            def optionalAddressColumnMapping() -> typing.Type['OptionalAddressColumnMapping']:
                return OptionalAddressColumnMapping
        
            @staticmethod
            def metadata() -> typing.Type['UploadsMetadata']:
                return UploadsMetadata
            
            
            class mergeVariableColumnMapping(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mergeVariableColumnMapping':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "originalFilename": originalFilename,
                "requiredAddressColumnMapping": requiredAddressColumnMapping,
                "optionalAddressColumnMapping": optionalAddressColumnMapping,
                "metadata": metadata,
                "mergeVariableColumnMapping": mergeVariableColumnMapping,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalFilename"]) -> MetaOapg.properties.originalFilename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredAddressColumnMapping"]) -> 'RequiredAddressColumnMapping': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionalAddressColumnMapping"]) -> 'OptionalAddressColumnMapping': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'UploadsMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mergeVariableColumnMapping"]) -> MetaOapg.properties.mergeVariableColumnMapping: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["originalFilename", "requiredAddressColumnMapping", "optionalAddressColumnMapping", "metadata", "mergeVariableColumnMapping", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalFilename"]) -> typing.Union[MetaOapg.properties.originalFilename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredAddressColumnMapping"]) -> typing.Union['RequiredAddressColumnMapping', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionalAddressColumnMapping"]) -> typing.Union['OptionalAddressColumnMapping', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['UploadsMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mergeVariableColumnMapping"]) -> typing.Union[MetaOapg.properties.mergeVariableColumnMapping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["originalFilename", "requiredAddressColumnMapping", "optionalAddressColumnMapping", "metadata", "mergeVariableColumnMapping", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        originalFilename: typing.Union[MetaOapg.properties.originalFilename, str, schemas.Unset] = schemas.unset,
        requiredAddressColumnMapping: typing.Union['RequiredAddressColumnMapping', schemas.Unset] = schemas.unset,
        optionalAddressColumnMapping: typing.Union['OptionalAddressColumnMapping', schemas.Unset] = schemas.unset,
        metadata: typing.Union['UploadsMetadata', schemas.Unset] = schemas.unset,
        mergeVariableColumnMapping: typing.Union[MetaOapg.properties.mergeVariableColumnMapping, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UploadUpdatable':
        return super().__new__(
            cls,
            *args,
            originalFilename=originalFilename,
            requiredAddressColumnMapping=requiredAddressColumnMapping,
            optionalAddressColumnMapping=optionalAddressColumnMapping,
            metadata=metadata,
            mergeVariableColumnMapping=mergeVariableColumnMapping,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.optional_address_column_mapping import OptionalAddressColumnMapping
from lob_python_sdk.model.required_address_column_mapping import RequiredAddressColumnMapping
from lob_python_sdk.model.uploads_metadata import UploadsMetadata
