# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class Check(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_2(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "amount",
                    "carrier",
                    "use_type",
                    "date_modified",
                    "date_created",
                    "id",
                    "to",
                    "url",
                    "bank_account",
                }
                
                class properties:
                
                    @staticmethod
                    def id() -> typing.Type['ChkId']:
                        return ChkId
                    
                    
                    class amount(
                        schemas.Float32Schema
                    ):
                    
                    
                        class MetaOapg:
                            format = 'float'
                            inclusive_maximum = 999999.99
                            multiple_of = 0.01
                
                    @staticmethod
                    def bank_account() -> typing.Type['BankAccount']:
                        return BankAccount
                    
                    
                    class check_bottom_template_id(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    TmplId,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'check_bottom_template_id':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class attachment_template_id(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    TmplId,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attachment_template_id':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class check_bottom_template_version_id(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.StrSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    VrsnId,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'check_bottom_template_version_id':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class attachment_template_version_id(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.StrSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    VrsnId,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attachment_template_version_id':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                
                    @staticmethod
                    def url() -> typing.Type['SignedLink']:
                        return SignedLink
                
                    @staticmethod
                    def to() -> typing.Type['ToAddressUsChk']:
                        return ToAddressUsChk
                    
                    
                    class carrier(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "USPS": "USPS",
                            }
                        
                        @schemas.classproperty
                        def USPS(cls):
                            return cls("USPS")
                    
                    
                    class thumbnails(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Thumbnail']:
                                return Thumbnail
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Thumbnail'], typing.List['Thumbnail']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'thumbnails':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Thumbnail':
                            return super().__getitem__(i)
                    expected_delivery_date = schemas.DateSchema
                    
                    
                    class tracking_events(
                        schemas.ListBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneTupleMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['TrackingEventNormal']:
                                return TrackingEventNormal
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[list, tuple, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'tracking_events':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                
                    @staticmethod
                    def use_type() -> typing.Type['ChkUseType']:
                        return ChkUseType
                
                    @staticmethod
                    def status() -> typing.Type['Status']:
                        return Status
                    
                    
                    class failure_reason(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    FailureReason,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'failure_reason':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class object(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "check": "CHECK",
                            }
                        
                        @schemas.classproperty
                        def CHECK(cls):
                            return cls("check")
                    date_created = schemas.DateTimeSchema
                    date_modified = schemas.DateTimeSchema
                    deleted = schemas.BoolSchema
                    __annotations__ = {
                        "id": id,
                        "amount": amount,
                        "bank_account": bank_account,
                        "check_bottom_template_id": check_bottom_template_id,
                        "attachment_template_id": attachment_template_id,
                        "check_bottom_template_version_id": check_bottom_template_version_id,
                        "attachment_template_version_id": attachment_template_version_id,
                        "url": url,
                        "to": to,
                        "carrier": carrier,
                        "thumbnails": thumbnails,
                        "expected_delivery_date": expected_delivery_date,
                        "tracking_events": tracking_events,
                        "use_type": use_type,
                        "status": status,
                        "failure_reason": failure_reason,
                        "object": object,
                        "date_created": date_created,
                        "date_modified": date_modified,
                        "deleted": deleted,
                    }
            
            amount: MetaOapg.properties.amount
            carrier: MetaOapg.properties.carrier
            use_type: 'ChkUseType'
            date_modified: MetaOapg.properties.date_modified
            date_created: MetaOapg.properties.date_created
            id: 'ChkId'
            to: 'ToAddressUsChk'
            url: 'SignedLink'
            bank_account: 'BankAccount'
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'ChkId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["bank_account"]) -> 'BankAccount': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["check_bottom_template_id"]) -> MetaOapg.properties.check_bottom_template_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attachment_template_id"]) -> MetaOapg.properties.attachment_template_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["check_bottom_template_version_id"]) -> MetaOapg.properties.check_bottom_template_version_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attachment_template_version_id"]) -> MetaOapg.properties.attachment_template_version_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["url"]) -> 'SignedLink': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["to"]) -> 'ToAddressUsChk': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["thumbnails"]) -> MetaOapg.properties.thumbnails: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["expected_delivery_date"]) -> MetaOapg.properties.expected_delivery_date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tracking_events"]) -> MetaOapg.properties.tracking_events: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["use_type"]) -> 'ChkUseType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["failure_reason"]) -> MetaOapg.properties.failure_reason: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["date_modified"]) -> MetaOapg.properties.date_modified: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "amount", "bank_account", "check_bottom_template_id", "attachment_template_id", "check_bottom_template_version_id", "attachment_template_version_id", "url", "to", "carrier", "thumbnails", "expected_delivery_date", "tracking_events", "use_type", "status", "failure_reason", "object", "date_created", "date_modified", "deleted", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'ChkId': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["bank_account"]) -> 'BankAccount': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["check_bottom_template_id"]) -> typing.Union[MetaOapg.properties.check_bottom_template_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attachment_template_id"]) -> typing.Union[MetaOapg.properties.attachment_template_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["check_bottom_template_version_id"]) -> typing.Union[MetaOapg.properties.check_bottom_template_version_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attachment_template_version_id"]) -> typing.Union[MetaOapg.properties.attachment_template_version_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> 'SignedLink': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> 'ToAddressUsChk': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["thumbnails"]) -> typing.Union[MetaOapg.properties.thumbnails, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["expected_delivery_date"]) -> typing.Union[MetaOapg.properties.expected_delivery_date, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tracking_events"]) -> typing.Union[MetaOapg.properties.tracking_events, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["use_type"]) -> 'ChkUseType': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['Status', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["failure_reason"]) -> typing.Union[MetaOapg.properties.failure_reason, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["date_modified"]) -> MetaOapg.properties.date_modified: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "amount", "bank_account", "check_bottom_template_id", "attachment_template_id", "check_bottom_template_version_id", "attachment_template_version_id", "url", "to", "carrier", "thumbnails", "expected_delivery_date", "tracking_events", "use_type", "status", "failure_reason", "object", "date_created", "date_modified", "deleted", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
                carrier: typing.Union[MetaOapg.properties.carrier, str, ],
                use_type: 'ChkUseType',
                date_modified: typing.Union[MetaOapg.properties.date_modified, str, datetime, ],
                date_created: typing.Union[MetaOapg.properties.date_created, str, datetime, ],
                id: 'ChkId',
                to: 'ToAddressUsChk',
                url: 'SignedLink',
                bank_account: 'BankAccount',
                check_bottom_template_id: typing.Union[MetaOapg.properties.check_bottom_template_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                attachment_template_id: typing.Union[MetaOapg.properties.attachment_template_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                check_bottom_template_version_id: typing.Union[MetaOapg.properties.check_bottom_template_version_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                attachment_template_version_id: typing.Union[MetaOapg.properties.attachment_template_version_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                thumbnails: typing.Union[MetaOapg.properties.thumbnails, list, tuple, schemas.Unset] = schemas.unset,
                expected_delivery_date: typing.Union[MetaOapg.properties.expected_delivery_date, str, date, schemas.Unset] = schemas.unset,
                tracking_events: typing.Union[MetaOapg.properties.tracking_events, list, tuple, None, schemas.Unset] = schemas.unset,
                status: typing.Union['Status', schemas.Unset] = schemas.unset,
                failure_reason: typing.Union[MetaOapg.properties.failure_reason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
                deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    amount=amount,
                    carrier=carrier,
                    use_type=use_type,
                    date_modified=date_modified,
                    date_created=date_created,
                    id=id,
                    to=to,
                    url=url,
                    bank_account=bank_account,
                    check_bottom_template_id=check_bottom_template_id,
                    attachment_template_id=attachment_template_id,
                    check_bottom_template_version_id=check_bottom_template_version_id,
                    attachment_template_version_id=attachment_template_version_id,
                    thumbnails=thumbnails,
                    expected_delivery_date=expected_delivery_date,
                    tracking_events=tracking_events,
                    status=status,
                    failure_reason=failure_reason,
                    object=object,
                    deleted=deleted,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CheckBase,
                FromUs,
                cls.all_of_2,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Check':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.bank_account import BankAccount
from lob_python_sdk.model.check_base import CheckBase
from lob_python_sdk.model.chk_id import ChkId
from lob_python_sdk.model.chk_use_type import ChkUseType
from lob_python_sdk.model.failure_reason import FailureReason
from lob_python_sdk.model.from_us import FromUs
from lob_python_sdk.model.signed_link import SignedLink
from lob_python_sdk.model.status import Status
from lob_python_sdk.model.thumbnail import Thumbnail
from lob_python_sdk.model.tmpl_id import TmplId
from lob_python_sdk.model.to_address_us_chk import ToAddressUsChk
from lob_python_sdk.model.tracking_event_normal import TrackingEventNormal
from lob_python_sdk.model.vrsn_id import VrsnId
