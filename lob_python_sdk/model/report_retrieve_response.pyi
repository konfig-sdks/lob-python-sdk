# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class ReportRetrieveResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "data",
            "offset",
            "total_count",
            "count",
        }
        
        class properties:
        
            @staticmethod
            def data() -> typing.Type['ReportRetrieveResponseData']:
                return ReportRetrieveResponseData
            count = schemas.IntSchema
            total_count = schemas.IntSchema
            
            
            class next_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class prev_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'prev_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "data": data,
                "count": count,
                "total_count": total_count,
                "next_url": next_url,
                "prev_url": prev_url,
            }
    
    data: 'ReportRetrieveResponseData'
    offset: schemas.AnyTypeSchema
    total_count: MetaOapg.properties.total_count
    count: MetaOapg.properties.count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'ReportRetrieveResponseData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_count"]) -> MetaOapg.properties.total_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_url"]) -> MetaOapg.properties.next_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prev_url"]) -> MetaOapg.properties.prev_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "count", "total_count", "next_url", "prev_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'ReportRetrieveResponseData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_count"]) -> MetaOapg.properties.total_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_url"]) -> typing.Union[MetaOapg.properties.next_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prev_url"]) -> typing.Union[MetaOapg.properties.prev_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "count", "total_count", "next_url", "prev_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: 'ReportRetrieveResponseData',
        offset: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        total_count: typing.Union[MetaOapg.properties.total_count, decimal.Decimal, int, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        next_url: typing.Union[MetaOapg.properties.next_url, None, str, schemas.Unset] = schemas.unset,
        prev_url: typing.Union[MetaOapg.properties.prev_url, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportRetrieveResponse':
        return super().__new__(
            cls,
            *args,
            data=data,
            offset=offset,
            total_count=total_count,
            count=count,
            next_url=next_url,
            prev_url=prev_url,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.report_retrieve_response_data import ReportRetrieveResponseData
