# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class EventType(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "resource",
            "enabled_for_test",
            "id",
            "object",
        }
        
        class properties:
            
            
            class id(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PostcardTypes,
                            SelfMailerTypes,
                            LetterTypes,
                            CheckTypes,
                            AddressTypes,
                            BankAccountTypes,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            enabled_for_test = schemas.BoolSchema
            
            
            class resource(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "postcards": "POSTCARDS",
                        "self mailers": "SELF_MAILERS",
                        "letters": "LETTERS",
                        "checks": "CHECKS",
                        "addresses": "ADDRESSES",
                        "bank accounts": "BANK_ACCOUNTS",
                    }
                
                @schemas.classproperty
                def POSTCARDS(cls):
                    return cls("postcards")
                
                @schemas.classproperty
                def SELF_MAILERS(cls):
                    return cls("self mailers")
                
                @schemas.classproperty
                def LETTERS(cls):
                    return cls("letters")
                
                @schemas.classproperty
                def CHECKS(cls):
                    return cls("checks")
                
                @schemas.classproperty
                def ADDRESSES(cls):
                    return cls("addresses")
                
                @schemas.classproperty
                def BANK_ACCOUNTS(cls):
                    return cls("bank accounts")
            
            
            class object(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "event_type": "EVENT_TYPE",
                    }
                
                @schemas.classproperty
                def EVENT_TYPE(cls):
                    return cls("event_type")
            __annotations__ = {
                "id": id,
                "enabled_for_test": enabled_for_test,
                "resource": resource,
                "object": object,
            }
    
    resource: MetaOapg.properties.resource
    enabled_for_test: MetaOapg.properties.enabled_for_test
    id: MetaOapg.properties.id
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled_for_test"]) -> MetaOapg.properties.enabled_for_test: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource"]) -> MetaOapg.properties.resource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "enabled_for_test", "resource", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled_for_test"]) -> MetaOapg.properties.enabled_for_test: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource"]) -> MetaOapg.properties.resource: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "enabled_for_test", "resource", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        resource: typing.Union[MetaOapg.properties.resource, str, ],
        enabled_for_test: typing.Union[MetaOapg.properties.enabled_for_test, bool, ],
        id: typing.Union[MetaOapg.properties.id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventType':
        return super().__new__(
            cls,
            *args,
            resource=resource,
            enabled_for_test=enabled_for_test,
            id=id,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.address_types import AddressTypes
from lob_python_sdk.model.bank_account_types import BankAccountTypes
from lob_python_sdk.model.check_types import CheckTypes
from lob_python_sdk.model.letter_types import LetterTypes
from lob_python_sdk.model.postcard_types import PostcardTypes
from lob_python_sdk.model.self_mailer_types import SelfMailerTypes
