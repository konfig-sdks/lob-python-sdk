# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class BankAccountBase(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "account_number",
            "account_type",
            "signatory",
            "routing_number",
        }
        
        class properties:
            
            
            class routing_number(
                schemas.StrSchema
            ):
                pass
            
            
            class account_number(
                schemas.StrSchema
            ):
                pass
            
            
            class account_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COMPANY(cls):
                    return cls("company")
                
                @schemas.classproperty
                def INDIVIDUAL(cls):
                    return cls("individual")
            
            
            class signatory(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def description() -> typing.Type['ResourceDescription']:
                return ResourceDescription
            
            
            class check_template(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COMMON(cls):
                    return cls("common")
                
                @schemas.classproperty
                def JPM(cls):
                    return cls("jpm")
            fractional_routing_number = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            zipcode = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['Metadata']:
                return Metadata
            __annotations__ = {
                "routing_number": routing_number,
                "account_number": account_number,
                "account_type": account_type,
                "signatory": signatory,
                "description": description,
                "check_template": check_template,
                "fractional_routing_number": fractional_routing_number,
                "city": city,
                "state": state,
                "zipcode": zipcode,
                "metadata": metadata,
            }
    
    account_number: MetaOapg.properties.account_number
    account_type: MetaOapg.properties.account_type
    signatory: MetaOapg.properties.signatory
    routing_number: MetaOapg.properties.routing_number
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_number"]) -> MetaOapg.properties.routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatory"]) -> MetaOapg.properties.signatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'ResourceDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_template"]) -> MetaOapg.properties.check_template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fractional_routing_number"]) -> MetaOapg.properties.fractional_routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipcode"]) -> MetaOapg.properties.zipcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'Metadata': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["routing_number", "account_number", "account_type", "signatory", "description", "check_template", "fractional_routing_number", "city", "state", "zipcode", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_number"]) -> MetaOapg.properties.routing_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatory"]) -> MetaOapg.properties.signatory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['ResourceDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_template"]) -> typing.Union[MetaOapg.properties.check_template, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fractional_routing_number"]) -> typing.Union[MetaOapg.properties.fractional_routing_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipcode"]) -> typing.Union[MetaOapg.properties.zipcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['Metadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["routing_number", "account_number", "account_type", "signatory", "description", "check_template", "fractional_routing_number", "city", "state", "zipcode", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        account_number: typing.Union[MetaOapg.properties.account_number, str, ],
        account_type: typing.Union[MetaOapg.properties.account_type, str, ],
        signatory: typing.Union[MetaOapg.properties.signatory, str, ],
        routing_number: typing.Union[MetaOapg.properties.routing_number, str, ],
        description: typing.Union['ResourceDescription', schemas.Unset] = schemas.unset,
        check_template: typing.Union[MetaOapg.properties.check_template, str, schemas.Unset] = schemas.unset,
        fractional_routing_number: typing.Union[MetaOapg.properties.fractional_routing_number, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        zipcode: typing.Union[MetaOapg.properties.zipcode, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union['Metadata', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BankAccountBase':
        return super().__new__(
            cls,
            *args,
            account_number=account_number,
            account_type=account_type,
            signatory=signatory,
            routing_number=routing_number,
            description=description,
            check_template=check_template,
            fractional_routing_number=fractional_routing_number,
            city=city,
            state=state,
            zipcode=zipcode,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.metadata import Metadata
from lob_python_sdk.model.resource_description import ResourceDescription
