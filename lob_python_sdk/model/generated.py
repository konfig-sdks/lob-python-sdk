# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class Generated(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "carrier",
            "to",
        }
        
        class properties:
        
            @staticmethod
            def to() -> typing.Type['Address']:
                return Address
            
            
            class carrier(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "USPS": "USPS",
                    }
                
                @schemas.classproperty
                def USPS(cls):
                    return cls("USPS")
            
            
            class thumbnails(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Thumbnail']:
                        return Thumbnail
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Thumbnail'], typing.List['Thumbnail']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thumbnails':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Thumbnail':
                    return super().__getitem__(i)
            expected_delivery_date = schemas.DateSchema
            date_created = schemas.DateTimeSchema
            date_modified = schemas.DateTimeSchema
            deleted = schemas.BoolSchema
            __annotations__ = {
                "to": to,
                "carrier": carrier,
                "thumbnails": thumbnails,
                "expected_delivery_date": expected_delivery_date,
                "date_created": date_created,
                "date_modified": date_modified,
                "deleted": deleted,
            }
    
    carrier: MetaOapg.properties.carrier
    to: 'Address'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnails"]) -> MetaOapg.properties.thumbnails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_delivery_date"]) -> MetaOapg.properties.expected_delivery_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_modified"]) -> MetaOapg.properties.date_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["to", "carrier", "thumbnails", "expected_delivery_date", "date_created", "date_modified", "deleted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> 'Address': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnails"]) -> typing.Union[MetaOapg.properties.thumbnails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_delivery_date"]) -> typing.Union[MetaOapg.properties.expected_delivery_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> typing.Union[MetaOapg.properties.date_created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_modified"]) -> typing.Union[MetaOapg.properties.date_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["to", "carrier", "thumbnails", "expected_delivery_date", "date_created", "date_modified", "deleted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        carrier: typing.Union[MetaOapg.properties.carrier, str, ],
        to: 'Address',
        thumbnails: typing.Union[MetaOapg.properties.thumbnails, list, tuple, schemas.Unset] = schemas.unset,
        expected_delivery_date: typing.Union[MetaOapg.properties.expected_delivery_date, str, date, schemas.Unset] = schemas.unset,
        date_created: typing.Union[MetaOapg.properties.date_created, str, datetime, schemas.Unset] = schemas.unset,
        date_modified: typing.Union[MetaOapg.properties.date_modified, str, datetime, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Generated':
        return super().__new__(
            cls,
            *args,
            carrier=carrier,
            to=to,
            thumbnails=thumbnails,
            expected_delivery_date=expected_delivery_date,
            date_created=date_created,
            date_modified=date_modified,
            deleted=deleted,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.address import Address
from lob_python_sdk.model.thumbnail import Thumbnail
