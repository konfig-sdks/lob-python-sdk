# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class UsAutocompletionsWritable(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "address_prefix",
        }
        
        class properties:
            address_prefix = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            zip_code = schemas.StrSchema
            geo_ip_sort = schemas.BoolSchema
            __annotations__ = {
                "address_prefix": address_prefix,
                "city": city,
                "state": state,
                "zip_code": zip_code,
                "geo_ip_sort": geo_ip_sort,
            }
    
    address_prefix: MetaOapg.properties.address_prefix
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_prefix"]) -> MetaOapg.properties.address_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip_code"]) -> MetaOapg.properties.zip_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo_ip_sort"]) -> MetaOapg.properties.geo_ip_sort: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address_prefix", "city", "state", "zip_code", "geo_ip_sort", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_prefix"]) -> MetaOapg.properties.address_prefix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip_code"]) -> typing.Union[MetaOapg.properties.zip_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo_ip_sort"]) -> typing.Union[MetaOapg.properties.geo_ip_sort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address_prefix", "city", "state", "zip_code", "geo_ip_sort", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address_prefix: typing.Union[MetaOapg.properties.address_prefix, str, ],
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        zip_code: typing.Union[MetaOapg.properties.zip_code, str, schemas.Unset] = schemas.unset,
        geo_ip_sort: typing.Union[MetaOapg.properties.geo_ip_sort, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsAutocompletionsWritable':
        return super().__new__(
            cls,
            *args,
            address_prefix=address_prefix,
            city=city,
            state=state,
            zip_code=zip_code,
            geo_ip_sort=geo_ip_sort,
            _configuration=_configuration,
            **kwargs,
        )
