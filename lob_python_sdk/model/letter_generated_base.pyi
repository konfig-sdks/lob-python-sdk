# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class LetterGeneratedBase(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_2(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "use_type",
                    "from",
                    "id",
                }
                
                class properties:
                
                    @staticmethod
                    def url() -> typing.Type['SignedLink']:
                        return SignedLink
                
                    @staticmethod
                    def id() -> typing.Type['LtrId']:
                        return LtrId
                    
                    
                    class template_id(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    TmplId,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'template_id':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class template_version_id(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.StrSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    VrsnId,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'template_version_id':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                
                    @staticmethod
                    def campaign_id() -> typing.Type['CampaignId']:
                        return CampaignId
                
                    @staticmethod
                    def use_type() -> typing.Type['LtrUseType']:
                        return LtrUseType
                    fsc = schemas.BoolSchema
                
                    @staticmethod
                    def status() -> typing.Type['Status']:
                        return Status
                    
                    
                    class failure_reason(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    FailureReason,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'failure_reason':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class object(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def LETTER(cls):
                            return cls("letter")
                    __annotations__ = {
                        "url": url,
                        "id": id,
                        "template_id": template_id,
                        "template_version_id": template_version_id,
                        "campaign_id": campaign_id,
                        "use_type": use_type,
                        "fsc": fsc,
                        "status": status,
                        "failure_reason": failure_reason,
                        "object": object,
                    }
            
            use_type: 'LtrUseType'
            id: 'LtrId'
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["url"]) -> 'SignedLink': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'LtrId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["template_version_id"]) -> MetaOapg.properties.template_version_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["campaign_id"]) -> 'CampaignId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["use_type"]) -> 'LtrUseType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["fsc"]) -> MetaOapg.properties.fsc: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["failure_reason"]) -> MetaOapg.properties.failure_reason: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "id", "template_id", "template_version_id", "campaign_id", "use_type", "fsc", "status", "failure_reason", "object", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union['SignedLink', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'LtrId': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["template_id"]) -> typing.Union[MetaOapg.properties.template_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["template_version_id"]) -> typing.Union[MetaOapg.properties.template_version_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["campaign_id"]) -> typing.Union['CampaignId', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["use_type"]) -> 'LtrUseType': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["fsc"]) -> typing.Union[MetaOapg.properties.fsc, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['Status', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["failure_reason"]) -> typing.Union[MetaOapg.properties.failure_reason, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "id", "template_id", "template_version_id", "campaign_id", "use_type", "fsc", "status", "failure_reason", "object", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                use_type: 'LtrUseType',
                id: 'LtrId',
                url: typing.Union['SignedLink', schemas.Unset] = schemas.unset,
                template_id: typing.Union[MetaOapg.properties.template_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                template_version_id: typing.Union[MetaOapg.properties.template_version_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                campaign_id: typing.Union['CampaignId', schemas.Unset] = schemas.unset,
                fsc: typing.Union[MetaOapg.properties.fsc, bool, schemas.Unset] = schemas.unset,
                status: typing.Union['Status', schemas.Unset] = schemas.unset,
                failure_reason: typing.Union[MetaOapg.properties.failure_reason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    use_type=use_type,
                    id=id,
                    url=url,
                    template_id=template_id,
                    template_version_id=template_version_id,
                    campaign_id=campaign_id,
                    fsc=fsc,
                    status=status,
                    failure_reason=failure_reason,
                    object=object,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Generated,
                ModelFrom,
                cls.all_of_2,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LetterGeneratedBase':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.campaign_id import CampaignId
from lob_python_sdk.model.failure_reason import FailureReason
from lob_python_sdk.model.generated import Generated
from lob_python_sdk.model.ltr_id import LtrId
from lob_python_sdk.model.ltr_use_type import LtrUseType
from lob_python_sdk.model.model_from import ModelFrom
from lob_python_sdk.model.signed_link import SignedLink
from lob_python_sdk.model.status import Status
from lob_python_sdk.model.tmpl_id import TmplId
from lob_python_sdk.model.vrsn_id import VrsnId
