# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class ExtraService(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't `usps_standard`. See <a href="https://www.lob.com/pricing/print-mail#compare" target="_blank">pricing</a> for extra costs incurred.
  * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for address and barcode information. See here for templates: <a href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf" target="_blank">#10 envelope</a> and <a href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf" target="_blank">flat envelope</a> (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be charged for this extra sheet.
  * `certified_return_receipt` - request an electronic copy of the recipient's signature to prove delivery of your certified letter
  * `registered` - provides tracking and confirmation for international addresses

  
Not available for `us_legal` letter size.

    """


    class MetaOapg:
        enum_value_to_name = {
            "certified": "CERTIFIED",
            "certified_return_receipt": "CERTIFIED_RETURN_RECEIPT",
            "registered": "REGISTERED",
            None: "NONE",
        }
    
    @schemas.classproperty
    def CERTIFIED(cls):
        return cls("certified")
    
    @schemas.classproperty
    def CERTIFIED_RETURN_RECEIPT(cls):
        return cls("certified_return_receipt")
    
    @schemas.classproperty
    def REGISTERED(cls):
        return cls("registered")
    
    @schemas.classproperty
    def NONE(cls):
        return cls(None)


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ExtraService':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )
