# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class UsVerification(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def components() -> typing.Type['UsComponents']:
                return UsComponents
        
            @staticmethod
            def id() -> typing.Type['UsVerId']:
                return UsVerId
        
            @staticmethod
            def recipient() -> typing.Type['Recipient']:
                return Recipient
        
            @staticmethod
            def primary_line() -> typing.Type['PrimaryLineUs']:
                return PrimaryLineUs
        
            @staticmethod
            def secondary_line() -> typing.Type['SecondaryLine']:
                return SecondaryLine
        
            @staticmethod
            def urbanization() -> typing.Type['Urbanization']:
                return Urbanization
            last_line = schemas.StrSchema
            
            
            class deliverability(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "deliverable": "DELIVERABLE",
                        "deliverable_unnecessary_unit": "DELIVERABLE_UNNECESSARY_UNIT",
                        "deliverable_incorrect_unit": "DELIVERABLE_INCORRECT_UNIT",
                        "deliverable_missing_unit": "DELIVERABLE_MISSING_UNIT",
                        "undeliverable": "UNDELIVERABLE",
                    }
                
                @schemas.classproperty
                def DELIVERABLE(cls):
                    return cls("deliverable")
                
                @schemas.classproperty
                def DELIVERABLE_UNNECESSARY_UNIT(cls):
                    return cls("deliverable_unnecessary_unit")
                
                @schemas.classproperty
                def DELIVERABLE_INCORRECT_UNIT(cls):
                    return cls("deliverable_incorrect_unit")
                
                @schemas.classproperty
                def DELIVERABLE_MISSING_UNIT(cls):
                    return cls("deliverable_missing_unit")
                
                @schemas.classproperty
                def UNDELIVERABLE(cls):
                    return cls("undeliverable")
            
            
            class valid_address(
                schemas.EnumBase,
                schemas.BoolSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        True: "TRUE",
                        False: "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls(True)
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
        
            @staticmethod
            def deliverability_analysis() -> typing.Type['DeliverabilityAnalysis']:
                return DeliverabilityAnalysis
        
            @staticmethod
            def lob_confidence_score() -> typing.Type['LobConfidenceScore']:
                return LobConfidenceScore
            
            
            class object(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "us_verification": "US_VERIFICATION",
                    }
                
                @schemas.classproperty
                def US_VERIFICATION(cls):
                    return cls("us_verification")
            __annotations__ = {
                "components": components,
                "id": id,
                "recipient": recipient,
                "primary_line": primary_line,
                "secondary_line": secondary_line,
                "urbanization": urbanization,
                "last_line": last_line,
                "deliverability": deliverability,
                "valid_address": valid_address,
                "deliverability_analysis": deliverability_analysis,
                "lob_confidence_score": lob_confidence_score,
                "object": object,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["components"]) -> 'UsComponents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'UsVerId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient"]) -> 'Recipient': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_line"]) -> 'PrimaryLineUs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondary_line"]) -> 'SecondaryLine': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urbanization"]) -> 'Urbanization': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_line"]) -> MetaOapg.properties.last_line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliverability"]) -> MetaOapg.properties.deliverability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_address"]) -> MetaOapg.properties.valid_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliverability_analysis"]) -> 'DeliverabilityAnalysis': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lob_confidence_score"]) -> 'LobConfidenceScore': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["components", "id", "recipient", "primary_line", "secondary_line", "urbanization", "last_line", "deliverability", "valid_address", "deliverability_analysis", "lob_confidence_score", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["components"]) -> typing.Union['UsComponents', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['UsVerId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient"]) -> typing.Union['Recipient', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_line"]) -> typing.Union['PrimaryLineUs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondary_line"]) -> typing.Union['SecondaryLine', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urbanization"]) -> typing.Union['Urbanization', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_line"]) -> typing.Union[MetaOapg.properties.last_line, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliverability"]) -> typing.Union[MetaOapg.properties.deliverability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_address"]) -> typing.Union[MetaOapg.properties.valid_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliverability_analysis"]) -> typing.Union['DeliverabilityAnalysis', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lob_confidence_score"]) -> typing.Union['LobConfidenceScore', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["components", "id", "recipient", "primary_line", "secondary_line", "urbanization", "last_line", "deliverability", "valid_address", "deliverability_analysis", "lob_confidence_score", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        components: typing.Union['UsComponents', schemas.Unset] = schemas.unset,
        id: typing.Union['UsVerId', schemas.Unset] = schemas.unset,
        recipient: typing.Union['Recipient', schemas.Unset] = schemas.unset,
        primary_line: typing.Union['PrimaryLineUs', schemas.Unset] = schemas.unset,
        secondary_line: typing.Union['SecondaryLine', schemas.Unset] = schemas.unset,
        urbanization: typing.Union['Urbanization', schemas.Unset] = schemas.unset,
        last_line: typing.Union[MetaOapg.properties.last_line, str, schemas.Unset] = schemas.unset,
        deliverability: typing.Union[MetaOapg.properties.deliverability, str, schemas.Unset] = schemas.unset,
        valid_address: typing.Union[MetaOapg.properties.valid_address, bool, schemas.Unset] = schemas.unset,
        deliverability_analysis: typing.Union['DeliverabilityAnalysis', schemas.Unset] = schemas.unset,
        lob_confidence_score: typing.Union['LobConfidenceScore', schemas.Unset] = schemas.unset,
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsVerification':
        return super().__new__(
            cls,
            *args,
            components=components,
            id=id,
            recipient=recipient,
            primary_line=primary_line,
            secondary_line=secondary_line,
            urbanization=urbanization,
            last_line=last_line,
            deliverability=deliverability,
            valid_address=valid_address,
            deliverability_analysis=deliverability_analysis,
            lob_confidence_score=lob_confidence_score,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.deliverability_analysis import DeliverabilityAnalysis
from lob_python_sdk.model.lob_confidence_score import LobConfidenceScore
from lob_python_sdk.model.primary_line_us import PrimaryLineUs
from lob_python_sdk.model.recipient import Recipient
from lob_python_sdk.model.secondary_line import SecondaryLine
from lob_python_sdk.model.urbanization import Urbanization
from lob_python_sdk.model.us_components import UsComponents
from lob_python_sdk.model.us_ver_id import UsVerId
