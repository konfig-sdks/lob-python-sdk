# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class LinkSingle(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "redirect_link",
        }
        
        class properties:
            redirect_link = schemas.StrSchema
            domain = schemas.StrSchema
            slug = schemas.StrSchema
        
            @staticmethod
            def metadata_tag() -> typing.Type['Metadata']:
                return Metadata
            billing_group_id = schemas.StrSchema
            __annotations__ = {
                "redirect_link": redirect_link,
                "domain": domain,
                "slug": slug,
                "metadata_tag": metadata_tag,
                "billing_group_id": billing_group_id,
            }
    
    redirect_link: MetaOapg.properties.redirect_link
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirect_link"]) -> MetaOapg.properties.redirect_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata_tag"]) -> 'Metadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_group_id"]) -> MetaOapg.properties.billing_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["redirect_link", "domain", "slug", "metadata_tag", "billing_group_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirect_link"]) -> MetaOapg.properties.redirect_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata_tag"]) -> typing.Union['Metadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_group_id"]) -> typing.Union[MetaOapg.properties.billing_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["redirect_link", "domain", "slug", "metadata_tag", "billing_group_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        redirect_link: typing.Union[MetaOapg.properties.redirect_link, str, ],
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
        metadata_tag: typing.Union['Metadata', schemas.Unset] = schemas.unset,
        billing_group_id: typing.Union[MetaOapg.properties.billing_group_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkSingle':
        return super().__new__(
            cls,
            *args,
            redirect_link=redirect_link,
            domain=domain,
            slug=slug,
            metadata_tag=metadata_tag,
            billing_group_id=billing_group_id,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.metadata import Metadata
