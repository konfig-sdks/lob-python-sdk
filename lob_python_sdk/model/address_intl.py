# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class AddressIntl(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.ComposedBase,
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "address_line1",
                    "address_country",
                    "id",
                }
                
                class properties:
                
                    @staticmethod
                    def description() -> typing.Type['ResourceDescription']:
                        return ResourceDescription
                
                    @staticmethod
                    def id() -> typing.Type['AdrId']:
                        return AdrId
                    
                    
                    class name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 40
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'name':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                
                    @staticmethod
                    def company() -> typing.Type['Company']:
                        return Company
                    
                    
                    class phone(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 40
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'phone':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class email(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 100
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'email':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                
                    @staticmethod
                    def metadata() -> typing.Type['Metadata']:
                        return Metadata
                    
                    
                    class address_line1(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 200
                    
                    
                    class address_line2(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 200
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'address_line2':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class address_city(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 200
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'address_city':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class address_state(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 200
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'address_state':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class address_zip(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 40
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'address_zip':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class address_country(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 200
                            enum_value_to_name = {
                                "AFGHANISTAN": "AFGHANISTAN",
                                "ALBANIA": "ALBANIA",
                                "ALGERIA": "ALGERIA",
                                "AMERICAN SAMOA": "AMERICAN_SAMOA",
                                "ANDORRA": "ANDORRA",
                                "ANGOLA": "ANGOLA",
                                "ANGUILLA": "ANGUILLA",
                                "ANTARCTICA": "ANTARCTICA",
                                "ANTIGUA AND BARBUDA": "ANTIGUA_AND_BARBUDA",
                                "ARGENTINA": "ARGENTINA",
                                "ARUBA": "ARUBA",
                                "AUSTRALIA": "AUSTRALIA",
                                "AUSTRIA": "AUSTRIA",
                                "AZERBAIJAN": "AZERBAIJAN",
                                "BAHRAIN": "BAHRAIN",
                                "BANGLADESH": "BANGLADESH",
                                "BARBADOS": "BARBADOS",
                                "BELARUS": "BELARUS",
                                "BELGIUM": "BELGIUM",
                                "BELIZE": "BELIZE",
                                "BENIN": "BENIN",
                                "BERMUDA": "BERMUDA",
                                "BHUTAN": "BHUTAN",
                                "BOLIVIA (PLURINATIONAL STATE OF)": "BOLIVIA_PLURINATIONAL_STATE_OF",
                                "BONAIRE, SAINT EUSTATIUS AND SABA": "BONAIRE_SAINT_EUSTATIUS_AND_SABA",
                                "BOSNIA AND HERZEGOVINA": "BOSNIA_AND_HERZEGOVINA",
                                "BOTSWANA": "BOTSWANA",
                                "BRAZIL": "BRAZIL",
                                "BRITISH INDIAN OCEAN TERRITORY": "BRITISH_INDIAN_OCEAN_TERRITORY",
                                "BRITISH VIRGIN ISLANDS": "BRITISH_VIRGIN_ISLANDS",
                                "BRUNEI DARUSSALAM": "BRUNEI_DARUSSALAM",
                                "BULGARIA": "BULGARIA",
                                "BURKINA FASO": "BURKINA_FASO",
                                "BURUNDI": "BURUNDI",
                                "CABO VERDE": "CABO_VERDE",
                                "CAMBODIA": "CAMBODIA",
                                "CAMEROON": "CAMEROON",
                                "CANADA": "CANADA",
                                "CAYMAN ISLANDS": "CAYMAN_ISLANDS",
                                "CENTRAL AFRICAN REPUBLIC": "CENTRAL_AFRICAN_REPUBLIC",
                                "CHAD": "CHAD",
                                "CHILE": "CHILE",
                                "CHINA": "CHINA",
                                "COLOMBIA": "COLOMBIA",
                                "COMOROS": "COMOROS",
                                "CONGO": "CONGO",
                                "CONGO, DEMOCRATIC REPUBLIC OF THE": "CONGO_DEMOCRATIC_REPUBLIC_OF_THE",
                                "COOK ISLANDS": "COOK_ISLANDS",
                                "COSTA RICA": "COSTA_RICA",
                                "CÔTE D'IVOIRE": "CTE_DIVOIRE",
                                "CROATIA": "CROATIA",
                                "CUBA": "CUBA",
                                "CURAÇAO": "CURAAO",
                                "CYPRUS": "CYPRUS",
                                "CZECH REPUBLIC": "CZECH_REPUBLIC",
                                "DENMARK": "DENMARK",
                                "DJIBOUTI": "DJIBOUTI",
                                "DOMINICA": "DOMINICA",
                                "DOMINICAN REPUBLIC": "DOMINICAN_REPUBLIC",
                                "ECUADOR": "ECUADOR",
                                "EGYPT": "EGYPT",
                                "EL SALVADOR": "EL_SALVADOR",
                                "EQUATORIAL GUINEA": "EQUATORIAL_GUINEA",
                                "ERITREA": "ERITREA",
                                "ESTONIA": "ESTONIA",
                                "ESWATINI": "ESWATINI",
                                "ETHIOPIA": "ETHIOPIA",
                                "FALKLAND ISLANDS (MALVINAS)": "FALKLAND_ISLANDS_MALVINAS",
                                "FAROE ISLANDS": "FAROE_ISLANDS",
                                "FIJI": "FIJI",
                                "FINLAND": "FINLAND",
                                "FRANCE": "FRANCE",
                                "GABON": "GABON",
                                "GAMBIA": "GAMBIA",
                                "GEORGIA": "GEORGIA",
                                "GERMANY": "GERMANY",
                                "GHANA": "GHANA",
                                "GIBRALTAR": "GIBRALTAR",
                                "GREECE": "GREECE",
                                "GREENLAND": "GREENLAND",
                                "GRENADA": "GRENADA",
                                "GUATEMALA": "GUATEMALA",
                                "GUINEA": "GUINEA",
                                "GUINEA-BISSAU": "GUINEABISSAU",
                                "GUYANA": "GUYANA",
                                "HAITI": "HAITI",
                                "HOLY SEE": "HOLY_SEE",
                                "HONDURAS": "HONDURAS",
                                "HONG KONG": "HONG_KONG",
                                "HUNGARY": "HUNGARY",
                                "ICELAND": "ICELAND",
                                "INDIA": "INDIA",
                                "INDONESIA": "INDONESIA",
                                "IRAN (ISLAMIC REPUBLIC OF)": "IRAN_ISLAMIC_REPUBLIC_OF",
                                "IRAQ": "IRAQ",
                                "IRELAND": "IRELAND",
                                "ISRAEL": "ISRAEL",
                                "ITALY": "ITALY",
                                "JAMAICA": "JAMAICA",
                                "JAPAN": "JAPAN",
                                "JORDAN": "JORDAN",
                                "KAZAKHSTAN": "KAZAKHSTAN",
                                "KENYA": "KENYA",
                                "KIRIBATI": "KIRIBATI",
                                "KOREA (DEMOCRATIC PEOPLE’S REPUBLIC OF)": "KOREA_DEMOCRATIC_PEOPLES_REPUBLIC_OF",
                                "KOREA, REPUBLIC OF": "KOREA_REPUBLIC_OF",
                                "KUWAIT": "KUWAIT",
                                "KYRGYZSTAN": "KYRGYZSTAN",
                                "LAO PEOPLE’S DEMOCRATIC REPUBLIC": "LAO_PEOPLES_DEMOCRATIC_REPUBLIC",
                                "LATVIA": "LATVIA",
                                "LEBANON": "LEBANON",
                                "LESOTHO": "LESOTHO",
                                "LIBERIA": "LIBERIA",
                                "LIBYA": "LIBYA",
                                "LIECHTENSTEIN": "LIECHTENSTEIN",
                                "LITHUANIA": "LITHUANIA",
                                "LUXEMBOURG": "LUXEMBOURG",
                                "MACAO": "MACAO",
                                "MACEDONIA": "MACEDONIA",
                                "MADAGASCAR": "MADAGASCAR",
                                "MALAWI": "MALAWI",
                                "MALAYSIA": "MALAYSIA",
                                "MALDIVES": "MALDIVES",
                                "MALI": "MALI",
                                "MALTA": "MALTA",
                                "MAURITANIA": "MAURITANIA",
                                "MAURITIUS": "MAURITIUS",
                                "MEXICO": "MEXICO",
                                "MOLDOVA, REPUBLIC OF": "MOLDOVA_REPUBLIC_OF",
                                "MONACO": "MONACO",
                                "MONGOLIA": "MONGOLIA",
                                "MONTENEGRO": "MONTENEGRO",
                                "MONTSERRAT": "MONTSERRAT",
                                "MOROCCO": "MOROCCO",
                                "MOZAMBIQUE": "MOZAMBIQUE",
                                "MYANMAR": "MYANMAR",
                                "NAMIBIA": "NAMIBIA",
                                "NAURU": "NAURU",
                                "NEPAL": "NEPAL",
                                "NETHERLAND ANTILLES": "NETHERLAND_ANTILLES",
                                "NETHERLANDS": "NETHERLANDS",
                                "NEW ZEALAND": "NEW_ZEALAND",
                                "NICARAGUA": "NICARAGUA",
                                "NIGER": "NIGER",
                                "NIGERIA": "NIGERIA",
                                "NIUE": "NIUE",
                                "NORFOLK ISLAND": "NORFOLK_ISLAND",
                                "NORWAY": "NORWAY",
                                "OMAN": "OMAN",
                                "PAKISTAN": "PAKISTAN",
                                "PANAMA": "PANAMA",
                                "PAPUA NEW GUINEA": "PAPUA_NEW_GUINEA",
                                "PARAGUAY": "PARAGUAY",
                                "PERU": "PERU",
                                "PHILIPPINES": "PHILIPPINES",
                                "PITCAIRN": "PITCAIRN",
                                "POLAND": "POLAND",
                                "PORTUGAL": "PORTUGAL",
                                "QATAR": "QATAR",
                                "ROMANIA": "ROMANIA",
                                "RUSSIAN FEDERATION": "RUSSIAN_FEDERATION",
                                "RWANDA": "RWANDA",
                                "SAINT HELENA": "SAINT_HELENA",
                                "SAINT KITTS AND NEVIS": "SAINT_KITTS_AND_NEVIS",
                                "SAINT LUCIA": "SAINT_LUCIA",
                                "SAINT VINCENT AND THE GRENADINES": "SAINT_VINCENT_AND_THE_GRENADINES",
                                "SAMOA": "SAMOA",
                                "SAN MARINO": "SAN_MARINO",
                                "SAO TOME AND PRINCIPE": "SAO_TOME_AND_PRINCIPE",
                                "SAUDI ARABIA": "SAUDI_ARABIA",
                                "SENEGAL": "SENEGAL",
                                "SERBIA": "SERBIA",
                                "SEYCHELLES": "SEYCHELLES",
                                "SIERRA LEONE": "SIERRA_LEONE",
                                "SINGAPORE": "SINGAPORE",
                                "SINT MAARTEN": "SINT_MAARTEN",
                                "SLOVAKIA": "SLOVAKIA",
                                "SLOVENIA": "SLOVENIA",
                                "SOLOMON ISLANDS": "SOLOMON_ISLANDS",
                                "SOMALIA": "SOMALIA",
                                "SOUTH AFRICA": "SOUTH_AFRICA",
                                "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS": "SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS",
                                "SOUTH SUDAN": "SOUTH_SUDAN",
                                "SPAIN": "SPAIN",
                                "SRI LANKA": "SRI_LANKA",
                                "SUDAN": "SUDAN",
                                "SURINAME": "SURINAME",
                                "SWEDEN": "SWEDEN",
                                "SWITZERLAND": "SWITZERLAND",
                                "SYRIAN ARAB REPUBLIC": "SYRIAN_ARAB_REPUBLIC",
                                "TAIWAN": "TAIWAN",
                                "TAJIKISTAN": "TAJIKISTAN",
                                "TANZANIA": "TANZANIA",
                                "THAILAND": "THAILAND",
                                "THE BAHAMAS": "THE_BAHAMAS",
                                "TIMOR-LESTE": "TIMORLESTE",
                                "TOGO": "TOGO",
                                "TOKELAU": "TOKELAU",
                                "TONGA": "TONGA",
                                "TRINIDAD AND TOBAGO": "TRINIDAD_AND_TOBAGO",
                                "TUNISIA": "TUNISIA",
                                "TURKEY": "TURKEY",
                                "TURKMENISTAN": "TURKMENISTAN",
                                "TURKS AND CAICOS ISLANDS": "TURKS_AND_CAICOS_ISLANDS",
                                "TUVALU": "TUVALU",
                                "UGANDA": "UGANDA",
                                "UKRAINE": "UKRAINE",
                                "UNITED ARAB EMIRATES": "UNITED_ARAB_EMIRATES",
                                "UNITED KINGDOM": "UNITED_KINGDOM",
                                "URUGUAY": "URUGUAY",
                                "UZBEKISTAN": "UZBEKISTAN",
                                "VANUATU": "VANUATU",
                                "VENEZUELA": "VENEZUELA",
                                "VIET NAM": "VIET_NAM",
                                "WESTERN SAHARA": "WESTERN_SAHARA",
                                "YEMEN": "YEMEN",
                                "ZAMBIA": "ZAMBIA",
                                "ZIMBABWE": "ZIMBABWE",
                            }
                        
                        @schemas.classproperty
                        def AFGHANISTAN(cls):
                            return cls("AFGHANISTAN")
                        
                        @schemas.classproperty
                        def ALBANIA(cls):
                            return cls("ALBANIA")
                        
                        @schemas.classproperty
                        def ALGERIA(cls):
                            return cls("ALGERIA")
                        
                        @schemas.classproperty
                        def AMERICAN_SAMOA(cls):
                            return cls("AMERICAN SAMOA")
                        
                        @schemas.classproperty
                        def ANDORRA(cls):
                            return cls("ANDORRA")
                        
                        @schemas.classproperty
                        def ANGOLA(cls):
                            return cls("ANGOLA")
                        
                        @schemas.classproperty
                        def ANGUILLA(cls):
                            return cls("ANGUILLA")
                        
                        @schemas.classproperty
                        def ANTARCTICA(cls):
                            return cls("ANTARCTICA")
                        
                        @schemas.classproperty
                        def ANTIGUA_AND_BARBUDA(cls):
                            return cls("ANTIGUA AND BARBUDA")
                        
                        @schemas.classproperty
                        def ARGENTINA(cls):
                            return cls("ARGENTINA")
                        
                        @schemas.classproperty
                        def ARUBA(cls):
                            return cls("ARUBA")
                        
                        @schemas.classproperty
                        def AUSTRALIA(cls):
                            return cls("AUSTRALIA")
                        
                        @schemas.classproperty
                        def AUSTRIA(cls):
                            return cls("AUSTRIA")
                        
                        @schemas.classproperty
                        def AZERBAIJAN(cls):
                            return cls("AZERBAIJAN")
                        
                        @schemas.classproperty
                        def BAHRAIN(cls):
                            return cls("BAHRAIN")
                        
                        @schemas.classproperty
                        def BANGLADESH(cls):
                            return cls("BANGLADESH")
                        
                        @schemas.classproperty
                        def BARBADOS(cls):
                            return cls("BARBADOS")
                        
                        @schemas.classproperty
                        def BELARUS(cls):
                            return cls("BELARUS")
                        
                        @schemas.classproperty
                        def BELGIUM(cls):
                            return cls("BELGIUM")
                        
                        @schemas.classproperty
                        def BELIZE(cls):
                            return cls("BELIZE")
                        
                        @schemas.classproperty
                        def BENIN(cls):
                            return cls("BENIN")
                        
                        @schemas.classproperty
                        def BERMUDA(cls):
                            return cls("BERMUDA")
                        
                        @schemas.classproperty
                        def BHUTAN(cls):
                            return cls("BHUTAN")
                        
                        @schemas.classproperty
                        def BOLIVIA_PLURINATIONAL_STATE_OF(cls):
                            return cls("BOLIVIA (PLURINATIONAL STATE OF)")
                        
                        @schemas.classproperty
                        def BONAIRE_SAINT_EUSTATIUS_AND_SABA(cls):
                            return cls("BONAIRE, SAINT EUSTATIUS AND SABA")
                        
                        @schemas.classproperty
                        def BOSNIA_AND_HERZEGOVINA(cls):
                            return cls("BOSNIA AND HERZEGOVINA")
                        
                        @schemas.classproperty
                        def BOTSWANA(cls):
                            return cls("BOTSWANA")
                        
                        @schemas.classproperty
                        def BRAZIL(cls):
                            return cls("BRAZIL")
                        
                        @schemas.classproperty
                        def BRITISH_INDIAN_OCEAN_TERRITORY(cls):
                            return cls("BRITISH INDIAN OCEAN TERRITORY")
                        
                        @schemas.classproperty
                        def BRITISH_VIRGIN_ISLANDS(cls):
                            return cls("BRITISH VIRGIN ISLANDS")
                        
                        @schemas.classproperty
                        def BRUNEI_DARUSSALAM(cls):
                            return cls("BRUNEI DARUSSALAM")
                        
                        @schemas.classproperty
                        def BULGARIA(cls):
                            return cls("BULGARIA")
                        
                        @schemas.classproperty
                        def BURKINA_FASO(cls):
                            return cls("BURKINA FASO")
                        
                        @schemas.classproperty
                        def BURUNDI(cls):
                            return cls("BURUNDI")
                        
                        @schemas.classproperty
                        def CABO_VERDE(cls):
                            return cls("CABO VERDE")
                        
                        @schemas.classproperty
                        def CAMBODIA(cls):
                            return cls("CAMBODIA")
                        
                        @schemas.classproperty
                        def CAMEROON(cls):
                            return cls("CAMEROON")
                        
                        @schemas.classproperty
                        def CANADA(cls):
                            return cls("CANADA")
                        
                        @schemas.classproperty
                        def CAYMAN_ISLANDS(cls):
                            return cls("CAYMAN ISLANDS")
                        
                        @schemas.classproperty
                        def CENTRAL_AFRICAN_REPUBLIC(cls):
                            return cls("CENTRAL AFRICAN REPUBLIC")
                        
                        @schemas.classproperty
                        def CHAD(cls):
                            return cls("CHAD")
                        
                        @schemas.classproperty
                        def CHILE(cls):
                            return cls("CHILE")
                        
                        @schemas.classproperty
                        def CHINA(cls):
                            return cls("CHINA")
                        
                        @schemas.classproperty
                        def COLOMBIA(cls):
                            return cls("COLOMBIA")
                        
                        @schemas.classproperty
                        def COMOROS(cls):
                            return cls("COMOROS")
                        
                        @schemas.classproperty
                        def CONGO(cls):
                            return cls("CONGO")
                        
                        @schemas.classproperty
                        def CONGO_DEMOCRATIC_REPUBLIC_OF_THE(cls):
                            return cls("CONGO, DEMOCRATIC REPUBLIC OF THE")
                        
                        @schemas.classproperty
                        def COOK_ISLANDS(cls):
                            return cls("COOK ISLANDS")
                        
                        @schemas.classproperty
                        def COSTA_RICA(cls):
                            return cls("COSTA RICA")
                        
                        @schemas.classproperty
                        def CTE_DIVOIRE(cls):
                            return cls("CÔTE D'IVOIRE")
                        
                        @schemas.classproperty
                        def CROATIA(cls):
                            return cls("CROATIA")
                        
                        @schemas.classproperty
                        def CUBA(cls):
                            return cls("CUBA")
                        
                        @schemas.classproperty
                        def CURAAO(cls):
                            return cls("CURAÇAO")
                        
                        @schemas.classproperty
                        def CYPRUS(cls):
                            return cls("CYPRUS")
                        
                        @schemas.classproperty
                        def CZECH_REPUBLIC(cls):
                            return cls("CZECH REPUBLIC")
                        
                        @schemas.classproperty
                        def DENMARK(cls):
                            return cls("DENMARK")
                        
                        @schemas.classproperty
                        def DJIBOUTI(cls):
                            return cls("DJIBOUTI")
                        
                        @schemas.classproperty
                        def DOMINICA(cls):
                            return cls("DOMINICA")
                        
                        @schemas.classproperty
                        def DOMINICAN_REPUBLIC(cls):
                            return cls("DOMINICAN REPUBLIC")
                        
                        @schemas.classproperty
                        def ECUADOR(cls):
                            return cls("ECUADOR")
                        
                        @schemas.classproperty
                        def EGYPT(cls):
                            return cls("EGYPT")
                        
                        @schemas.classproperty
                        def EL_SALVADOR(cls):
                            return cls("EL SALVADOR")
                        
                        @schemas.classproperty
                        def EQUATORIAL_GUINEA(cls):
                            return cls("EQUATORIAL GUINEA")
                        
                        @schemas.classproperty
                        def ERITREA(cls):
                            return cls("ERITREA")
                        
                        @schemas.classproperty
                        def ESTONIA(cls):
                            return cls("ESTONIA")
                        
                        @schemas.classproperty
                        def ESWATINI(cls):
                            return cls("ESWATINI")
                        
                        @schemas.classproperty
                        def ETHIOPIA(cls):
                            return cls("ETHIOPIA")
                        
                        @schemas.classproperty
                        def FALKLAND_ISLANDS_MALVINAS(cls):
                            return cls("FALKLAND ISLANDS (MALVINAS)")
                        
                        @schemas.classproperty
                        def FAROE_ISLANDS(cls):
                            return cls("FAROE ISLANDS")
                        
                        @schemas.classproperty
                        def FIJI(cls):
                            return cls("FIJI")
                        
                        @schemas.classproperty
                        def FINLAND(cls):
                            return cls("FINLAND")
                        
                        @schemas.classproperty
                        def FRANCE(cls):
                            return cls("FRANCE")
                        
                        @schemas.classproperty
                        def GABON(cls):
                            return cls("GABON")
                        
                        @schemas.classproperty
                        def GAMBIA(cls):
                            return cls("GAMBIA")
                        
                        @schemas.classproperty
                        def GEORGIA(cls):
                            return cls("GEORGIA")
                        
                        @schemas.classproperty
                        def GERMANY(cls):
                            return cls("GERMANY")
                        
                        @schemas.classproperty
                        def GHANA(cls):
                            return cls("GHANA")
                        
                        @schemas.classproperty
                        def GIBRALTAR(cls):
                            return cls("GIBRALTAR")
                        
                        @schemas.classproperty
                        def GREECE(cls):
                            return cls("GREECE")
                        
                        @schemas.classproperty
                        def GREENLAND(cls):
                            return cls("GREENLAND")
                        
                        @schemas.classproperty
                        def GRENADA(cls):
                            return cls("GRENADA")
                        
                        @schemas.classproperty
                        def GUATEMALA(cls):
                            return cls("GUATEMALA")
                        
                        @schemas.classproperty
                        def GUINEA(cls):
                            return cls("GUINEA")
                        
                        @schemas.classproperty
                        def GUINEABISSAU(cls):
                            return cls("GUINEA-BISSAU")
                        
                        @schemas.classproperty
                        def GUYANA(cls):
                            return cls("GUYANA")
                        
                        @schemas.classproperty
                        def HAITI(cls):
                            return cls("HAITI")
                        
                        @schemas.classproperty
                        def HOLY_SEE(cls):
                            return cls("HOLY SEE")
                        
                        @schemas.classproperty
                        def HONDURAS(cls):
                            return cls("HONDURAS")
                        
                        @schemas.classproperty
                        def HONG_KONG(cls):
                            return cls("HONG KONG")
                        
                        @schemas.classproperty
                        def HUNGARY(cls):
                            return cls("HUNGARY")
                        
                        @schemas.classproperty
                        def ICELAND(cls):
                            return cls("ICELAND")
                        
                        @schemas.classproperty
                        def INDIA(cls):
                            return cls("INDIA")
                        
                        @schemas.classproperty
                        def INDONESIA(cls):
                            return cls("INDONESIA")
                        
                        @schemas.classproperty
                        def IRAN_ISLAMIC_REPUBLIC_OF(cls):
                            return cls("IRAN (ISLAMIC REPUBLIC OF)")
                        
                        @schemas.classproperty
                        def IRAQ(cls):
                            return cls("IRAQ")
                        
                        @schemas.classproperty
                        def IRELAND(cls):
                            return cls("IRELAND")
                        
                        @schemas.classproperty
                        def ISRAEL(cls):
                            return cls("ISRAEL")
                        
                        @schemas.classproperty
                        def ITALY(cls):
                            return cls("ITALY")
                        
                        @schemas.classproperty
                        def JAMAICA(cls):
                            return cls("JAMAICA")
                        
                        @schemas.classproperty
                        def JAPAN(cls):
                            return cls("JAPAN")
                        
                        @schemas.classproperty
                        def JORDAN(cls):
                            return cls("JORDAN")
                        
                        @schemas.classproperty
                        def KAZAKHSTAN(cls):
                            return cls("KAZAKHSTAN")
                        
                        @schemas.classproperty
                        def KENYA(cls):
                            return cls("KENYA")
                        
                        @schemas.classproperty
                        def KIRIBATI(cls):
                            return cls("KIRIBATI")
                        
                        @schemas.classproperty
                        def KOREA_DEMOCRATIC_PEOPLES_REPUBLIC_OF(cls):
                            return cls("KOREA (DEMOCRATIC PEOPLE’S REPUBLIC OF)")
                        
                        @schemas.classproperty
                        def KOREA_REPUBLIC_OF(cls):
                            return cls("KOREA, REPUBLIC OF")
                        
                        @schemas.classproperty
                        def KUWAIT(cls):
                            return cls("KUWAIT")
                        
                        @schemas.classproperty
                        def KYRGYZSTAN(cls):
                            return cls("KYRGYZSTAN")
                        
                        @schemas.classproperty
                        def LAO_PEOPLES_DEMOCRATIC_REPUBLIC(cls):
                            return cls("LAO PEOPLE’S DEMOCRATIC REPUBLIC")
                        
                        @schemas.classproperty
                        def LATVIA(cls):
                            return cls("LATVIA")
                        
                        @schemas.classproperty
                        def LEBANON(cls):
                            return cls("LEBANON")
                        
                        @schemas.classproperty
                        def LESOTHO(cls):
                            return cls("LESOTHO")
                        
                        @schemas.classproperty
                        def LIBERIA(cls):
                            return cls("LIBERIA")
                        
                        @schemas.classproperty
                        def LIBYA(cls):
                            return cls("LIBYA")
                        
                        @schemas.classproperty
                        def LIECHTENSTEIN(cls):
                            return cls("LIECHTENSTEIN")
                        
                        @schemas.classproperty
                        def LITHUANIA(cls):
                            return cls("LITHUANIA")
                        
                        @schemas.classproperty
                        def LUXEMBOURG(cls):
                            return cls("LUXEMBOURG")
                        
                        @schemas.classproperty
                        def MACAO(cls):
                            return cls("MACAO")
                        
                        @schemas.classproperty
                        def MACEDONIA(cls):
                            return cls("MACEDONIA")
                        
                        @schemas.classproperty
                        def MADAGASCAR(cls):
                            return cls("MADAGASCAR")
                        
                        @schemas.classproperty
                        def MALAWI(cls):
                            return cls("MALAWI")
                        
                        @schemas.classproperty
                        def MALAYSIA(cls):
                            return cls("MALAYSIA")
                        
                        @schemas.classproperty
                        def MALDIVES(cls):
                            return cls("MALDIVES")
                        
                        @schemas.classproperty
                        def MALI(cls):
                            return cls("MALI")
                        
                        @schemas.classproperty
                        def MALTA(cls):
                            return cls("MALTA")
                        
                        @schemas.classproperty
                        def MAURITANIA(cls):
                            return cls("MAURITANIA")
                        
                        @schemas.classproperty
                        def MAURITIUS(cls):
                            return cls("MAURITIUS")
                        
                        @schemas.classproperty
                        def MEXICO(cls):
                            return cls("MEXICO")
                        
                        @schemas.classproperty
                        def MOLDOVA_REPUBLIC_OF(cls):
                            return cls("MOLDOVA, REPUBLIC OF")
                        
                        @schemas.classproperty
                        def MONACO(cls):
                            return cls("MONACO")
                        
                        @schemas.classproperty
                        def MONGOLIA(cls):
                            return cls("MONGOLIA")
                        
                        @schemas.classproperty
                        def MONTENEGRO(cls):
                            return cls("MONTENEGRO")
                        
                        @schemas.classproperty
                        def MONTSERRAT(cls):
                            return cls("MONTSERRAT")
                        
                        @schemas.classproperty
                        def MOROCCO(cls):
                            return cls("MOROCCO")
                        
                        @schemas.classproperty
                        def MOZAMBIQUE(cls):
                            return cls("MOZAMBIQUE")
                        
                        @schemas.classproperty
                        def MYANMAR(cls):
                            return cls("MYANMAR")
                        
                        @schemas.classproperty
                        def NAMIBIA(cls):
                            return cls("NAMIBIA")
                        
                        @schemas.classproperty
                        def NAURU(cls):
                            return cls("NAURU")
                        
                        @schemas.classproperty
                        def NEPAL(cls):
                            return cls("NEPAL")
                        
                        @schemas.classproperty
                        def NETHERLAND_ANTILLES(cls):
                            return cls("NETHERLAND ANTILLES")
                        
                        @schemas.classproperty
                        def NETHERLANDS(cls):
                            return cls("NETHERLANDS")
                        
                        @schemas.classproperty
                        def NEW_ZEALAND(cls):
                            return cls("NEW ZEALAND")
                        
                        @schemas.classproperty
                        def NICARAGUA(cls):
                            return cls("NICARAGUA")
                        
                        @schemas.classproperty
                        def NIGER(cls):
                            return cls("NIGER")
                        
                        @schemas.classproperty
                        def NIGERIA(cls):
                            return cls("NIGERIA")
                        
                        @schemas.classproperty
                        def NIUE(cls):
                            return cls("NIUE")
                        
                        @schemas.classproperty
                        def NORFOLK_ISLAND(cls):
                            return cls("NORFOLK ISLAND")
                        
                        @schemas.classproperty
                        def NORWAY(cls):
                            return cls("NORWAY")
                        
                        @schemas.classproperty
                        def OMAN(cls):
                            return cls("OMAN")
                        
                        @schemas.classproperty
                        def PAKISTAN(cls):
                            return cls("PAKISTAN")
                        
                        @schemas.classproperty
                        def PANAMA(cls):
                            return cls("PANAMA")
                        
                        @schemas.classproperty
                        def PAPUA_NEW_GUINEA(cls):
                            return cls("PAPUA NEW GUINEA")
                        
                        @schemas.classproperty
                        def PARAGUAY(cls):
                            return cls("PARAGUAY")
                        
                        @schemas.classproperty
                        def PERU(cls):
                            return cls("PERU")
                        
                        @schemas.classproperty
                        def PHILIPPINES(cls):
                            return cls("PHILIPPINES")
                        
                        @schemas.classproperty
                        def PITCAIRN(cls):
                            return cls("PITCAIRN")
                        
                        @schemas.classproperty
                        def POLAND(cls):
                            return cls("POLAND")
                        
                        @schemas.classproperty
                        def PORTUGAL(cls):
                            return cls("PORTUGAL")
                        
                        @schemas.classproperty
                        def QATAR(cls):
                            return cls("QATAR")
                        
                        @schemas.classproperty
                        def ROMANIA(cls):
                            return cls("ROMANIA")
                        
                        @schemas.classproperty
                        def RUSSIAN_FEDERATION(cls):
                            return cls("RUSSIAN FEDERATION")
                        
                        @schemas.classproperty
                        def RWANDA(cls):
                            return cls("RWANDA")
                        
                        @schemas.classproperty
                        def SAINT_HELENA(cls):
                            return cls("SAINT HELENA")
                        
                        @schemas.classproperty
                        def SAINT_KITTS_AND_NEVIS(cls):
                            return cls("SAINT KITTS AND NEVIS")
                        
                        @schemas.classproperty
                        def SAINT_LUCIA(cls):
                            return cls("SAINT LUCIA")
                        
                        @schemas.classproperty
                        def SAINT_VINCENT_AND_THE_GRENADINES(cls):
                            return cls("SAINT VINCENT AND THE GRENADINES")
                        
                        @schemas.classproperty
                        def SAMOA(cls):
                            return cls("SAMOA")
                        
                        @schemas.classproperty
                        def SAN_MARINO(cls):
                            return cls("SAN MARINO")
                        
                        @schemas.classproperty
                        def SAO_TOME_AND_PRINCIPE(cls):
                            return cls("SAO TOME AND PRINCIPE")
                        
                        @schemas.classproperty
                        def SAUDI_ARABIA(cls):
                            return cls("SAUDI ARABIA")
                        
                        @schemas.classproperty
                        def SENEGAL(cls):
                            return cls("SENEGAL")
                        
                        @schemas.classproperty
                        def SERBIA(cls):
                            return cls("SERBIA")
                        
                        @schemas.classproperty
                        def SEYCHELLES(cls):
                            return cls("SEYCHELLES")
                        
                        @schemas.classproperty
                        def SIERRA_LEONE(cls):
                            return cls("SIERRA LEONE")
                        
                        @schemas.classproperty
                        def SINGAPORE(cls):
                            return cls("SINGAPORE")
                        
                        @schemas.classproperty
                        def SINT_MAARTEN(cls):
                            return cls("SINT MAARTEN")
                        
                        @schemas.classproperty
                        def SLOVAKIA(cls):
                            return cls("SLOVAKIA")
                        
                        @schemas.classproperty
                        def SLOVENIA(cls):
                            return cls("SLOVENIA")
                        
                        @schemas.classproperty
                        def SOLOMON_ISLANDS(cls):
                            return cls("SOLOMON ISLANDS")
                        
                        @schemas.classproperty
                        def SOMALIA(cls):
                            return cls("SOMALIA")
                        
                        @schemas.classproperty
                        def SOUTH_AFRICA(cls):
                            return cls("SOUTH AFRICA")
                        
                        @schemas.classproperty
                        def SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS(cls):
                            return cls("SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS")
                        
                        @schemas.classproperty
                        def SOUTH_SUDAN(cls):
                            return cls("SOUTH SUDAN")
                        
                        @schemas.classproperty
                        def SPAIN(cls):
                            return cls("SPAIN")
                        
                        @schemas.classproperty
                        def SRI_LANKA(cls):
                            return cls("SRI LANKA")
                        
                        @schemas.classproperty
                        def SUDAN(cls):
                            return cls("SUDAN")
                        
                        @schemas.classproperty
                        def SURINAME(cls):
                            return cls("SURINAME")
                        
                        @schemas.classproperty
                        def SWEDEN(cls):
                            return cls("SWEDEN")
                        
                        @schemas.classproperty
                        def SWITZERLAND(cls):
                            return cls("SWITZERLAND")
                        
                        @schemas.classproperty
                        def SYRIAN_ARAB_REPUBLIC(cls):
                            return cls("SYRIAN ARAB REPUBLIC")
                        
                        @schemas.classproperty
                        def TAIWAN(cls):
                            return cls("TAIWAN")
                        
                        @schemas.classproperty
                        def TAJIKISTAN(cls):
                            return cls("TAJIKISTAN")
                        
                        @schemas.classproperty
                        def TANZANIA(cls):
                            return cls("TANZANIA")
                        
                        @schemas.classproperty
                        def THAILAND(cls):
                            return cls("THAILAND")
                        
                        @schemas.classproperty
                        def THE_BAHAMAS(cls):
                            return cls("THE BAHAMAS")
                        
                        @schemas.classproperty
                        def TIMORLESTE(cls):
                            return cls("TIMOR-LESTE")
                        
                        @schemas.classproperty
                        def TOGO(cls):
                            return cls("TOGO")
                        
                        @schemas.classproperty
                        def TOKELAU(cls):
                            return cls("TOKELAU")
                        
                        @schemas.classproperty
                        def TONGA(cls):
                            return cls("TONGA")
                        
                        @schemas.classproperty
                        def TRINIDAD_AND_TOBAGO(cls):
                            return cls("TRINIDAD AND TOBAGO")
                        
                        @schemas.classproperty
                        def TUNISIA(cls):
                            return cls("TUNISIA")
                        
                        @schemas.classproperty
                        def TURKEY(cls):
                            return cls("TURKEY")
                        
                        @schemas.classproperty
                        def TURKMENISTAN(cls):
                            return cls("TURKMENISTAN")
                        
                        @schemas.classproperty
                        def TURKS_AND_CAICOS_ISLANDS(cls):
                            return cls("TURKS AND CAICOS ISLANDS")
                        
                        @schemas.classproperty
                        def TUVALU(cls):
                            return cls("TUVALU")
                        
                        @schemas.classproperty
                        def UGANDA(cls):
                            return cls("UGANDA")
                        
                        @schemas.classproperty
                        def UKRAINE(cls):
                            return cls("UKRAINE")
                        
                        @schemas.classproperty
                        def UNITED_ARAB_EMIRATES(cls):
                            return cls("UNITED ARAB EMIRATES")
                        
                        @schemas.classproperty
                        def UNITED_KINGDOM(cls):
                            return cls("UNITED KINGDOM")
                        
                        @schemas.classproperty
                        def URUGUAY(cls):
                            return cls("URUGUAY")
                        
                        @schemas.classproperty
                        def UZBEKISTAN(cls):
                            return cls("UZBEKISTAN")
                        
                        @schemas.classproperty
                        def VANUATU(cls):
                            return cls("VANUATU")
                        
                        @schemas.classproperty
                        def VENEZUELA(cls):
                            return cls("VENEZUELA")
                        
                        @schemas.classproperty
                        def VIET_NAM(cls):
                            return cls("VIET NAM")
                        
                        @schemas.classproperty
                        def WESTERN_SAHARA(cls):
                            return cls("WESTERN SAHARA")
                        
                        @schemas.classproperty
                        def YEMEN(cls):
                            return cls("YEMEN")
                        
                        @schemas.classproperty
                        def ZAMBIA(cls):
                            return cls("ZAMBIA")
                        
                        @schemas.classproperty
                        def ZIMBABWE(cls):
                            return cls("ZIMBABWE")
                    
                    
                    class object(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "address": "ADDRESS",
                            }
                        
                        @schemas.classproperty
                        def ADDRESS(cls):
                            return cls("address")
                    __annotations__ = {
                        "description": description,
                        "id": id,
                        "name": name,
                        "company": company,
                        "phone": phone,
                        "email": email,
                        "metadata": metadata,
                        "address_line1": address_line1,
                        "address_line2": address_line2,
                        "address_city": address_city,
                        "address_state": address_state,
                        "address_zip": address_zip,
                        "address_country": address_country,
                        "object": object,
                    }
                
                
                class any_of_0(
                    schemas.AnyTypeSchema,
                ):
                
                
                    class MetaOapg:
                        required = {
                            "name",
                        }
                
                    
                    name: schemas.AnyTypeSchema
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_0':
                        return super().__new__(
                            cls,
                            *args,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_1(
                    schemas.AnyTypeSchema,
                ):
                
                
                    class MetaOapg:
                        required = {
                            "company",
                        }
                
                    
                    company: schemas.AnyTypeSchema
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_1':
                        return super().__new__(
                            cls,
                            *args,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                @classmethod
                @functools.lru_cache()
                def any_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        cls.any_of_0,
                        cls.any_of_1,
                    ]
        
            
            address_line1: MetaOapg.properties.address_line1
            address_country: MetaOapg.properties.address_country
            id: 'AdrId'
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'ResourceDescription': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'AdrId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["company"]) -> 'Company': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'Metadata': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["address_line1"]) -> MetaOapg.properties.address_line1: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["address_line2"]) -> MetaOapg.properties.address_line2: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["address_city"]) -> MetaOapg.properties.address_city: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["address_state"]) -> MetaOapg.properties.address_state: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["address_zip"]) -> MetaOapg.properties.address_zip: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["address_country"]) -> MetaOapg.properties.address_country: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "company", "phone", "email", "metadata", "address_line1", "address_line2", "address_city", "address_state", "address_zip", "address_country", "object", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['ResourceDescription', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'AdrId': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union['Company', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['Metadata', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["address_line1"]) -> MetaOapg.properties.address_line1: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["address_line2"]) -> typing.Union[MetaOapg.properties.address_line2, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["address_city"]) -> typing.Union[MetaOapg.properties.address_city, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["address_state"]) -> typing.Union[MetaOapg.properties.address_state, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["address_zip"]) -> typing.Union[MetaOapg.properties.address_zip, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["address_country"]) -> MetaOapg.properties.address_country: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "company", "phone", "email", "metadata", "address_line1", "address_line2", "address_city", "address_state", "address_zip", "address_country", "object", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                address_line1: typing.Union[MetaOapg.properties.address_line1, str, ],
                address_country: typing.Union[MetaOapg.properties.address_country, str, ],
                id: 'AdrId',
                description: typing.Union['ResourceDescription', schemas.Unset] = schemas.unset,
                name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
                company: typing.Union['Company', schemas.Unset] = schemas.unset,
                phone: typing.Union[MetaOapg.properties.phone, None, str, schemas.Unset] = schemas.unset,
                email: typing.Union[MetaOapg.properties.email, None, str, schemas.Unset] = schemas.unset,
                metadata: typing.Union['Metadata', schemas.Unset] = schemas.unset,
                address_line2: typing.Union[MetaOapg.properties.address_line2, None, str, schemas.Unset] = schemas.unset,
                address_city: typing.Union[MetaOapg.properties.address_city, None, str, schemas.Unset] = schemas.unset,
                address_state: typing.Union[MetaOapg.properties.address_state, None, str, schemas.Unset] = schemas.unset,
                address_zip: typing.Union[MetaOapg.properties.address_zip, None, str, schemas.Unset] = schemas.unset,
                object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    address_line1=address_line1,
                    address_country=address_country,
                    id=id,
                    description=description,
                    name=name,
                    company=company,
                    phone=phone,
                    email=email,
                    metadata=metadata,
                    address_line2=address_line2,
                    address_city=address_city,
                    address_state=address_state,
                    address_zip=address_zip,
                    object=object,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                LobBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddressIntl':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.adr_id import AdrId
from lob_python_sdk.model.company import Company
from lob_python_sdk.model.lob_base import LobBase
from lob_python_sdk.model.metadata import Metadata
from lob_python_sdk.model.resource_description import ResourceDescription
