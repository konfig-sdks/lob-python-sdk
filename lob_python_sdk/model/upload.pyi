# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class Upload(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "metadata",
                    "validatedMailpieces",
                    "campaignId",
                    "dateModified",
                    "mode",
                    "accountId",
                    "mergeVariableColumnMapping",
                    "dateCreated",
                    "totalMailpieces",
                    "requiredAddressColumnMapping",
                    "failedMailpieces",
                    "id",
                    "optionalAddressColumnMapping",
                    "state",
                    "bytesProcessed",
                }
                
                class properties:
                
                    @staticmethod
                    def id() -> typing.Type['UplId']:
                        return UplId
                    accountId = schemas.StrSchema
                    
                    
                    class mode(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def TEST(cls):
                            return cls("test")
                        
                        @schemas.classproperty
                        def LIVE(cls):
                            return cls("live")
                    failuresUrl = schemas.StrSchema
                    originalFilename = schemas.StrSchema
                
                    @staticmethod
                    def state() -> typing.Type['UploadState']:
                        return UploadState
                    totalMailpieces = schemas.IntSchema
                    failedMailpieces = schemas.IntSchema
                    validatedMailpieces = schemas.IntSchema
                    bytesProcessed = schemas.IntSchema
                    dateCreated = schemas.DateTimeSchema
                    dateModified = schemas.DateTimeSchema
                    __annotations__ = {
                        "id": id,
                        "accountId": accountId,
                        "mode": mode,
                        "failuresUrl": failuresUrl,
                        "originalFilename": originalFilename,
                        "state": state,
                        "totalMailpieces": totalMailpieces,
                        "failedMailpieces": failedMailpieces,
                        "validatedMailpieces": validatedMailpieces,
                        "bytesProcessed": bytesProcessed,
                        "dateCreated": dateCreated,
                        "dateModified": dateModified,
                    }
            
            metadata: schemas.AnyTypeSchema
            validatedMailpieces: MetaOapg.properties.validatedMailpieces
            campaignId: schemas.AnyTypeSchema
            dateModified: MetaOapg.properties.dateModified
            mode: MetaOapg.properties.mode
            accountId: MetaOapg.properties.accountId
            mergeVariableColumnMapping: schemas.AnyTypeSchema
            dateCreated: MetaOapg.properties.dateCreated
            totalMailpieces: MetaOapg.properties.totalMailpieces
            requiredAddressColumnMapping: schemas.AnyTypeSchema
            failedMailpieces: MetaOapg.properties.failedMailpieces
            id: 'UplId'
            optionalAddressColumnMapping: schemas.AnyTypeSchema
            state: 'UploadState'
            bytesProcessed: MetaOapg.properties.bytesProcessed
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'UplId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["failuresUrl"]) -> MetaOapg.properties.failuresUrl: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["originalFilename"]) -> MetaOapg.properties.originalFilename: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'UploadState': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["totalMailpieces"]) -> MetaOapg.properties.totalMailpieces: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["failedMailpieces"]) -> MetaOapg.properties.failedMailpieces: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["validatedMailpieces"]) -> MetaOapg.properties.validatedMailpieces: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["bytesProcessed"]) -> MetaOapg.properties.bytesProcessed: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "accountId", "mode", "failuresUrl", "originalFilename", "state", "totalMailpieces", "failedMailpieces", "validatedMailpieces", "bytesProcessed", "dateCreated", "dateModified", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'UplId': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["failuresUrl"]) -> typing.Union[MetaOapg.properties.failuresUrl, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["originalFilename"]) -> typing.Union[MetaOapg.properties.originalFilename, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'UploadState': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["totalMailpieces"]) -> MetaOapg.properties.totalMailpieces: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["failedMailpieces"]) -> MetaOapg.properties.failedMailpieces: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["validatedMailpieces"]) -> MetaOapg.properties.validatedMailpieces: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["bytesProcessed"]) -> MetaOapg.properties.bytesProcessed: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "accountId", "mode", "failuresUrl", "originalFilename", "state", "totalMailpieces", "failedMailpieces", "validatedMailpieces", "bytesProcessed", "dateCreated", "dateModified", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                metadata: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                validatedMailpieces: typing.Union[MetaOapg.properties.validatedMailpieces, decimal.Decimal, int, ],
                campaignId: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                dateModified: typing.Union[MetaOapg.properties.dateModified, str, datetime, ],
                mode: typing.Union[MetaOapg.properties.mode, str, ],
                accountId: typing.Union[MetaOapg.properties.accountId, str, ],
                mergeVariableColumnMapping: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
                totalMailpieces: typing.Union[MetaOapg.properties.totalMailpieces, decimal.Decimal, int, ],
                requiredAddressColumnMapping: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                failedMailpieces: typing.Union[MetaOapg.properties.failedMailpieces, decimal.Decimal, int, ],
                id: 'UplId',
                optionalAddressColumnMapping: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                state: 'UploadState',
                bytesProcessed: typing.Union[MetaOapg.properties.bytesProcessed, decimal.Decimal, int, ],
                failuresUrl: typing.Union[MetaOapg.properties.failuresUrl, str, schemas.Unset] = schemas.unset,
                originalFilename: typing.Union[MetaOapg.properties.originalFilename, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    metadata=metadata,
                    validatedMailpieces=validatedMailpieces,
                    campaignId=campaignId,
                    dateModified=dateModified,
                    mode=mode,
                    accountId=accountId,
                    mergeVariableColumnMapping=mergeVariableColumnMapping,
                    dateCreated=dateCreated,
                    totalMailpieces=totalMailpieces,
                    requiredAddressColumnMapping=requiredAddressColumnMapping,
                    failedMailpieces=failedMailpieces,
                    id=id,
                    optionalAddressColumnMapping=optionalAddressColumnMapping,
                    state=state,
                    bytesProcessed=bytesProcessed,
                    failuresUrl=failuresUrl,
                    originalFilename=originalFilename,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                UploadWritable,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Upload':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.upl_id import UplId
from lob_python_sdk.model.upload_state import UploadState
from lob_python_sdk.model.upload_writable import UploadWritable
