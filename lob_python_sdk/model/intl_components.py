# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class IntlComponents(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A nested object containing a breakdown of each component of an address.
    """


    class MetaOapg:
        
        class properties:
            primary_number = schemas.StrSchema
            street_name = schemas.StrSchema
        
            @staticmethod
            def city() -> typing.Type['City']:
                return City
        
            @staticmethod
            def state() -> typing.Type['State']:
                return State
        
            @staticmethod
            def postal_code() -> typing.Type['PostalCode']:
                return PostalCode
            __annotations__ = {
                "primary_number": primary_number,
                "street_name": street_name,
                "city": city,
                "state": state,
                "postal_code": postal_code,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_number"]) -> MetaOapg.properties.primary_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street_name"]) -> MetaOapg.properties.street_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> 'City': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> 'PostalCode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["primary_number", "street_name", "city", "state", "postal_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_number"]) -> typing.Union[MetaOapg.properties.primary_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street_name"]) -> typing.Union[MetaOapg.properties.street_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union['City', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['State', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> typing.Union['PostalCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["primary_number", "street_name", "city", "state", "postal_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        primary_number: typing.Union[MetaOapg.properties.primary_number, str, schemas.Unset] = schemas.unset,
        street_name: typing.Union[MetaOapg.properties.street_name, str, schemas.Unset] = schemas.unset,
        city: typing.Union['City', schemas.Unset] = schemas.unset,
        state: typing.Union['State', schemas.Unset] = schemas.unset,
        postal_code: typing.Union['PostalCode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IntlComponents':
        return super().__new__(
            cls,
            *args,
            primary_number=primary_number,
            street_name=street_name,
            city=city,
            state=state,
            postal_code=postal_code,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.city import City
from lob_python_sdk.model.postal_code import PostalCode
from lob_python_sdk.model.state import State
