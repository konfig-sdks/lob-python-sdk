# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class TrackingEventDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "description",
            "action_required",
            "event",
        }
        
        class properties:
            description = schemas.StrSchema
            
            
            class event(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PACKAGE_ACCEPTED(cls):
                    return cls("package_accepted")
                
                @schemas.classproperty
                def PACKAGE_ARRIVED(cls):
                    return cls("package_arrived")
                
                @schemas.classproperty
                def PACKAGE_DEPARTED(cls):
                    return cls("package_departed")
                
                @schemas.classproperty
                def PACKAGE_PROCESSING(cls):
                    return cls("package_processing")
                
                @schemas.classproperty
                def PACKAGE_PROCESSED(cls):
                    return cls("package_processed")
                
                @schemas.classproperty
                def PACKAGE_IN_LOCAL_AREA(cls):
                    return cls("package_in_local_area")
                
                @schemas.classproperty
                def DELIVERY_SCHEDULED(cls):
                    return cls("delivery_scheduled")
                
                @schemas.classproperty
                def OUT_FOR_DELIVERY(cls):
                    return cls("out_for_delivery")
                
                @schemas.classproperty
                def PICKUP_AVAILABLE(cls):
                    return cls("pickup_available")
                
                @schemas.classproperty
                def DELIVERED(cls):
                    return cls("delivered")
                
                @schemas.classproperty
                def PACKAGE_FORWARDED(cls):
                    return cls("package_forwarded")
                
                @schemas.classproperty
                def RETURNED_TO_SENDER(cls):
                    return cls("returned_to_sender")
                
                @schemas.classproperty
                def ADDRESS_ISSUE(cls):
                    return cls("address_issue")
                
                @schemas.classproperty
                def CONTACT_CARRIER(cls):
                    return cls("contact_carrier")
                
                @schemas.classproperty
                def DELAYED(cls):
                    return cls("delayed")
                
                @schemas.classproperty
                def DELIVERY_ATTEMPTED(cls):
                    return cls("delivery_attempted")
                
                @schemas.classproperty
                def DELIVERY_RESCHEDULED(cls):
                    return cls("delivery_rescheduled")
                
                @schemas.classproperty
                def LOCATION_INACCESSIBLE(cls):
                    return cls("location_inaccessible")
                
                @schemas.classproperty
                def NOTICE_LEFT(cls):
                    return cls("notice_left")
                
                @schemas.classproperty
                def PACKAGE_DAMAGED(cls):
                    return cls("package_damaged")
                
                @schemas.classproperty
                def PACKAGE_DISPOSED(cls):
                    return cls("package_disposed")
                
                @schemas.classproperty
                def PACKAGE_HELD(cls):
                    return cls("package_held")
                
                @schemas.classproperty
                def PACKAGE_LOST(cls):
                    return cls("package_lost")
                
                @schemas.classproperty
                def PACKAGE_UNCLAIMED(cls):
                    return cls("package_unclaimed")
                
                @schemas.classproperty
                def PACKAGE_UNDELIVERABLE(cls):
                    return cls("package_undeliverable")
                
                @schemas.classproperty
                def RESCHEDULE_DELIVERY(cls):
                    return cls("reschedule_delivery")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
            action_required = schemas.BoolSchema
            notes = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "event": event,
                "action_required": action_required,
                "notes": notes,
            }
    
    description: MetaOapg.properties.description
    action_required: MetaOapg.properties.action_required
    event: MetaOapg.properties.event
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action_required"]) -> MetaOapg.properties.action_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "event", "action_required", "notes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action_required"]) -> MetaOapg.properties.action_required: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "event", "action_required", "notes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        action_required: typing.Union[MetaOapg.properties.action_required, bool, ],
        event: typing.Union[MetaOapg.properties.event, str, ],
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrackingEventDetails':
        return super().__new__(
            cls,
            *args,
            description=description,
            action_required=action_required,
            event=event,
            notes=notes,
            _configuration=_configuration,
            **kwargs,
        )
