# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class SelfMailerEditable(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "use_type",
                    "outside",
                    "to",
                    "inside",
                }
                
                class properties:
                    
                    
                    class inside(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def one_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    HtmlString,
                                    TmplId,
                                    RemoteFileUrl,
                                    LocalFilePath,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'inside':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class outside(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def one_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    HtmlString,
                                    TmplId,
                                    RemoteFileUrl,
                                    LocalFilePath,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'outside':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    billing_group_id = schemas.StrSchema
                
                    @staticmethod
                    def qr_code() -> typing.Type['QrCode']:
                        return QrCode
                
                    @staticmethod
                    def use_type() -> typing.Type['SfmUseType']:
                        return SfmUseType
                    fsc = schemas.BoolSchema
                    __annotations__ = {
                        "inside": inside,
                        "outside": outside,
                        "billing_group_id": billing_group_id,
                        "qr_code": qr_code,
                        "use_type": use_type,
                        "fsc": fsc,
                    }
            
            use_type: 'SfmUseType'
            outside: MetaOapg.properties.outside
            to: schemas.AnyTypeSchema
            inside: MetaOapg.properties.inside
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["inside"]) -> MetaOapg.properties.inside: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["outside"]) -> MetaOapg.properties.outside: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["billing_group_id"]) -> MetaOapg.properties.billing_group_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["qr_code"]) -> 'QrCode': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["use_type"]) -> 'SfmUseType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["fsc"]) -> MetaOapg.properties.fsc: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["inside", "outside", "billing_group_id", "qr_code", "use_type", "fsc", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["inside"]) -> MetaOapg.properties.inside: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["outside"]) -> MetaOapg.properties.outside: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["billing_group_id"]) -> typing.Union[MetaOapg.properties.billing_group_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["qr_code"]) -> typing.Union['QrCode', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["use_type"]) -> 'SfmUseType': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["fsc"]) -> typing.Union[MetaOapg.properties.fsc, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["inside", "outside", "billing_group_id", "qr_code", "use_type", "fsc", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                use_type: 'SfmUseType',
                outside: typing.Union[MetaOapg.properties.outside, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                to: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                inside: typing.Union[MetaOapg.properties.inside, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                billing_group_id: typing.Union[MetaOapg.properties.billing_group_id, str, schemas.Unset] = schemas.unset,
                qr_code: typing.Union['QrCode', schemas.Unset] = schemas.unset,
                fsc: typing.Union[MetaOapg.properties.fsc, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *args,
                    use_type=use_type,
                    outside=outside,
                    to=to,
                    inside=inside,
                    billing_group_id=billing_group_id,
                    qr_code=qr_code,
                    fsc=fsc,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                SelfMailerBase,
                InputTo,
                InputFromUs,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SelfMailerEditable':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.html_string import HtmlString
from lob_python_sdk.model.input_from_us import InputFromUs
from lob_python_sdk.model.input_to import InputTo
from lob_python_sdk.model.local_file_path import LocalFilePath
from lob_python_sdk.model.qr_code import QrCode
from lob_python_sdk.model.remote_file_url import RemoteFileUrl
from lob_python_sdk.model.self_mailer_base import SelfMailerBase
from lob_python_sdk.model.sfm_use_type import SfmUseType
from lob_python_sdk.model.tmpl_id import TmplId
