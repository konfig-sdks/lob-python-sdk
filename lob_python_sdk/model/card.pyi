# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class Card(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_2(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                required = {
                    "description",
                }
        
            
            description: schemas.AnyTypeSchema
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "auto_reorder",
                    "orientation",
                    "reorder_quantity",
                    "front_original_url",
                    "pending_quantity",
                    "url",
                    "available_quantity",
                    "threshold_amount",
                    "back_original_url",
                    "id",
                    "thumbnails",
                    "raw_url",
                    "object",
                    "status",
                }
                
                class properties:
                
                    @staticmethod
                    def id() -> typing.Type['CardId']:
                        return CardId
                    
                    
                    class url(
                        schemas.StrSchema
                    ):
                        pass
                    auto_reorder = schemas.BoolSchema
                    
                    
                    class reorder_quantity(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'reorder_quantity':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class raw_url(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class front_original_url(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class back_original_url(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class thumbnails(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Thumbnail']:
                                return Thumbnail
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Thumbnail'], typing.List['Thumbnail']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'thumbnails':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Thumbnail':
                            return super().__getitem__(i)
                    available_quantity = schemas.IntSchema
                    pending_quantity = schemas.IntSchema
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def PROCESSED(cls):
                            return cls("processed")
                        
                        @schemas.classproperty
                        def RENDERED(cls):
                            return cls("rendered")
                    
                    
                    class orientation(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def HORIZONTAL(cls):
                            return cls("horizontal")
                        
                        @schemas.classproperty
                        def VERTICAL(cls):
                            return cls("vertical")
                    threshold_amount = schemas.IntSchema
                    
                    
                    class object(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def CARD(cls):
                            return cls("card")
                    __annotations__ = {
                        "id": id,
                        "url": url,
                        "auto_reorder": auto_reorder,
                        "reorder_quantity": reorder_quantity,
                        "raw_url": raw_url,
                        "front_original_url": front_original_url,
                        "back_original_url": back_original_url,
                        "thumbnails": thumbnails,
                        "available_quantity": available_quantity,
                        "pending_quantity": pending_quantity,
                        "status": status,
                        "orientation": orientation,
                        "threshold_amount": threshold_amount,
                        "object": object,
                    }
            
            auto_reorder: MetaOapg.properties.auto_reorder
            orientation: MetaOapg.properties.orientation
            reorder_quantity: MetaOapg.properties.reorder_quantity
            front_original_url: MetaOapg.properties.front_original_url
            pending_quantity: MetaOapg.properties.pending_quantity
            url: MetaOapg.properties.url
            available_quantity: MetaOapg.properties.available_quantity
            threshold_amount: MetaOapg.properties.threshold_amount
            back_original_url: MetaOapg.properties.back_original_url
            id: 'CardId'
            thumbnails: MetaOapg.properties.thumbnails
            raw_url: MetaOapg.properties.raw_url
            object: MetaOapg.properties.object
            status: MetaOapg.properties.status
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'CardId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["auto_reorder"]) -> MetaOapg.properties.auto_reorder: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["reorder_quantity"]) -> MetaOapg.properties.reorder_quantity: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["raw_url"]) -> MetaOapg.properties.raw_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["front_original_url"]) -> MetaOapg.properties.front_original_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["back_original_url"]) -> MetaOapg.properties.back_original_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["thumbnails"]) -> MetaOapg.properties.thumbnails: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["available_quantity"]) -> MetaOapg.properties.available_quantity: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["pending_quantity"]) -> MetaOapg.properties.pending_quantity: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["orientation"]) -> MetaOapg.properties.orientation: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["threshold_amount"]) -> MetaOapg.properties.threshold_amount: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "url", "auto_reorder", "reorder_quantity", "raw_url", "front_original_url", "back_original_url", "thumbnails", "available_quantity", "pending_quantity", "status", "orientation", "threshold_amount", "object", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'CardId': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["auto_reorder"]) -> MetaOapg.properties.auto_reorder: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["reorder_quantity"]) -> MetaOapg.properties.reorder_quantity: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["raw_url"]) -> MetaOapg.properties.raw_url: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["front_original_url"]) -> MetaOapg.properties.front_original_url: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["back_original_url"]) -> MetaOapg.properties.back_original_url: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["thumbnails"]) -> MetaOapg.properties.thumbnails: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["available_quantity"]) -> MetaOapg.properties.available_quantity: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["pending_quantity"]) -> MetaOapg.properties.pending_quantity: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["orientation"]) -> MetaOapg.properties.orientation: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["threshold_amount"]) -> MetaOapg.properties.threshold_amount: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "url", "auto_reorder", "reorder_quantity", "raw_url", "front_original_url", "back_original_url", "thumbnails", "available_quantity", "pending_quantity", "status", "orientation", "threshold_amount", "object", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                auto_reorder: typing.Union[MetaOapg.properties.auto_reorder, bool, ],
                orientation: typing.Union[MetaOapg.properties.orientation, str, ],
                reorder_quantity: typing.Union[MetaOapg.properties.reorder_quantity, None, decimal.Decimal, int, ],
                front_original_url: typing.Union[MetaOapg.properties.front_original_url, str, ],
                pending_quantity: typing.Union[MetaOapg.properties.pending_quantity, decimal.Decimal, int, ],
                url: typing.Union[MetaOapg.properties.url, str, ],
                available_quantity: typing.Union[MetaOapg.properties.available_quantity, decimal.Decimal, int, ],
                threshold_amount: typing.Union[MetaOapg.properties.threshold_amount, decimal.Decimal, int, ],
                back_original_url: typing.Union[MetaOapg.properties.back_original_url, str, ],
                id: 'CardId',
                thumbnails: typing.Union[MetaOapg.properties.thumbnails, list, tuple, ],
                raw_url: typing.Union[MetaOapg.properties.raw_url, str, ],
                object: typing.Union[MetaOapg.properties.object, str, ],
                status: typing.Union[MetaOapg.properties.status, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *args,
                    auto_reorder=auto_reorder,
                    orientation=orientation,
                    reorder_quantity=reorder_quantity,
                    front_original_url=front_original_url,
                    pending_quantity=pending_quantity,
                    url=url,
                    available_quantity=available_quantity,
                    threshold_amount=threshold_amount,
                    back_original_url=back_original_url,
                    id=id,
                    thumbnails=thumbnails,
                    raw_url=raw_url,
                    object=object,
                    status=status,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                LobBase,
                CardBase,
                cls.all_of_2,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Card':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.card_base import CardBase
from lob_python_sdk.model.card_id import CardId
from lob_python_sdk.model.lob_base import LobBase
from lob_python_sdk.model.thumbnail import Thumbnail
