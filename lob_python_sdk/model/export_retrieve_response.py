# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class ExportRetrieveResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "s3Url",
            "dateCreated",
            "deleted",
            "uploadId",
            "dateModified",
            "id",
            "state",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['ExId']:
                return ExId
            dateCreated = schemas.DateTimeSchema
            dateModified = schemas.DateTimeSchema
            deleted = schemas.BoolSchema
            s3Url = schemas.StrSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "in_progress": "IN_PROGRESS",
                        "failed": "FAILED",
                        "succeeded": "SUCCEEDED",
                    }
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("in_progress")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def SUCCEEDED(cls):
                    return cls("succeeded")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "all": "ALL",
                        "failures": "FAILURES",
                        "successes": "SUCCESSES",
                    }
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("all")
                
                @schemas.classproperty
                def FAILURES(cls):
                    return cls("failures")
                
                @schemas.classproperty
                def SUCCESSES(cls):
                    return cls("successes")
        
            @staticmethod
            def uploadId() -> typing.Type['UplId']:
                return UplId
            __annotations__ = {
                "id": id,
                "dateCreated": dateCreated,
                "dateModified": dateModified,
                "deleted": deleted,
                "s3Url": s3Url,
                "state": state,
                "type": type,
                "uploadId": uploadId,
            }
    
    s3Url: MetaOapg.properties.s3Url
    dateCreated: MetaOapg.properties.dateCreated
    deleted: MetaOapg.properties.deleted
    uploadId: 'UplId'
    dateModified: MetaOapg.properties.dateModified
    id: 'ExId'
    state: MetaOapg.properties.state
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'ExId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3Url"]) -> MetaOapg.properties.s3Url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uploadId"]) -> 'UplId': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "dateCreated", "dateModified", "deleted", "s3Url", "state", "type", "uploadId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'ExId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3Url"]) -> MetaOapg.properties.s3Url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uploadId"]) -> 'UplId': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "dateCreated", "dateModified", "deleted", "s3Url", "state", "type", "uploadId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        s3Url: typing.Union[MetaOapg.properties.s3Url, str, ],
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
        deleted: typing.Union[MetaOapg.properties.deleted, bool, ],
        uploadId: 'UplId',
        dateModified: typing.Union[MetaOapg.properties.dateModified, str, datetime, ],
        id: 'ExId',
        state: typing.Union[MetaOapg.properties.state, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExportRetrieveResponse':
        return super().__new__(
            cls,
            *args,
            s3Url=s3Url,
            dateCreated=dateCreated,
            deleted=deleted,
            uploadId=uploadId,
            dateModified=dateModified,
            id=id,
            state=state,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.ex_id import ExId
from lob_python_sdk.model.upl_id import UplId
