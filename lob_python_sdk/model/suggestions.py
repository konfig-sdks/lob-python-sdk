# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class Suggestions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "primary_line",
            "city",
            "state",
            "zip_code",
        }
        
        class properties:
            primary_line = schemas.StrSchema
        
            @staticmethod
            def city() -> typing.Type['City']:
                return City
        
            @staticmethod
            def state() -> typing.Type['State']:
                return State
            
            
            class zip_code(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    all_of_0 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.all_of_0,
                            ZipCode,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'zip_code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class object(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "us_autocompletion": "US_AUTOCOMPLETION",
                    }
                
                @schemas.classproperty
                def US_AUTOCOMPLETION(cls):
                    return cls("us_autocompletion")
            __annotations__ = {
                "primary_line": primary_line,
                "city": city,
                "state": state,
                "zip_code": zip_code,
                "object": object,
            }
    
    primary_line: MetaOapg.properties.primary_line
    city: 'City'
    state: 'State'
    zip_code: MetaOapg.properties.zip_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_line"]) -> MetaOapg.properties.primary_line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> 'City': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip_code"]) -> MetaOapg.properties.zip_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["primary_line", "city", "state", "zip_code", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_line"]) -> MetaOapg.properties.primary_line: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> 'City': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip_code"]) -> MetaOapg.properties.zip_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["primary_line", "city", "state", "zip_code", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        primary_line: typing.Union[MetaOapg.properties.primary_line, str, ],
        city: 'City',
        state: 'State',
        zip_code: typing.Union[MetaOapg.properties.zip_code, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Suggestions':
        return super().__new__(
            cls,
            *args,
            primary_line=primary_line,
            city=city,
            state=state,
            zip_code=zip_code,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.city import City
from lob_python_sdk.model.state import State
from lob_python_sdk.model.zip_code import ZipCode
