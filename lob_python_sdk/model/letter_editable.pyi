# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class LetterEditable(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "use_type",
                    "file",
                    "color",
                    "from",
                    "to",
                }
                
                class properties:
                
                    @staticmethod
                    def file() -> typing.Type['LtrFile']:
                        return LtrFile
                
                    @staticmethod
                    def extra_service() -> typing.Type['ExtraService']:
                        return ExtraService
                    
                    
                    class cards(
                        schemas.ListBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneTupleMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['CardId']:
                                return CardId
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[list, tuple, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'cards':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                
                    @staticmethod
                    def mail_type() -> typing.Type['MailType']:
                        return MailType
                    
                    
                    class color(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.BoolSchema
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'color':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    double_sided = schemas.BoolSchema
                
                    @staticmethod
                    def address_placement() -> typing.Type['AddressPlacement']:
                        return AddressPlacement
                
                    @staticmethod
                    def return_envelope() -> typing.Type['ReturnEnvelopeUserProvided']:
                        return ReturnEnvelopeUserProvided
                    
                    
                    class perforated_page(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'perforated_page':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                
                    @staticmethod
                    def custom_envelope() -> typing.Type['UserProvided']:
                        return UserProvided
                    billing_group_id = schemas.StrSchema
                
                    @staticmethod
                    def qr_code() -> typing.Type['QrCode']:
                        return QrCode
                
                    @staticmethod
                    def use_type() -> typing.Type['LtrUseType']:
                        return LtrUseType
                    fsc = schemas.BoolSchema
                
                    @staticmethod
                    def size() -> typing.Type['LtrSize']:
                        return LtrSize
                    __annotations__ = {
                        "file": file,
                        "extra_service": extra_service,
                        "cards": cards,
                        "mail_type": mail_type,
                        "color": color,
                        "double_sided": double_sided,
                        "address_placement": address_placement,
                        "return_envelope": return_envelope,
                        "perforated_page": perforated_page,
                        "custom_envelope": custom_envelope,
                        "billing_group_id": billing_group_id,
                        "qr_code": qr_code,
                        "use_type": use_type,
                        "fsc": fsc,
                        "size": size,
                    }
            
            use_type: 'LtrUseType'
            file: 'LtrFile'
            color: MetaOapg.properties.color
            to: schemas.AnyTypeSchema
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'LtrFile': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["extra_service"]) -> 'ExtraService': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cards"]) -> MetaOapg.properties.cards: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["mail_type"]) -> 'MailType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["double_sided"]) -> MetaOapg.properties.double_sided: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["address_placement"]) -> 'AddressPlacement': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["return_envelope"]) -> 'ReturnEnvelopeUserProvided': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["perforated_page"]) -> MetaOapg.properties.perforated_page: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_envelope"]) -> 'UserProvided': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["billing_group_id"]) -> MetaOapg.properties.billing_group_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["qr_code"]) -> 'QrCode': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["use_type"]) -> 'LtrUseType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["fsc"]) -> MetaOapg.properties.fsc: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["size"]) -> 'LtrSize': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["file", "extra_service", "cards", "mail_type", "color", "double_sided", "address_placement", "return_envelope", "perforated_page", "custom_envelope", "billing_group_id", "qr_code", "use_type", "fsc", "size", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> 'LtrFile': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["extra_service"]) -> typing.Union['ExtraService', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cards"]) -> typing.Union[MetaOapg.properties.cards, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["mail_type"]) -> typing.Union['MailType', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["double_sided"]) -> typing.Union[MetaOapg.properties.double_sided, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["address_placement"]) -> typing.Union['AddressPlacement', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["return_envelope"]) -> typing.Union['ReturnEnvelopeUserProvided', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["perforated_page"]) -> typing.Union[MetaOapg.properties.perforated_page, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_envelope"]) -> typing.Union['UserProvided', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["billing_group_id"]) -> typing.Union[MetaOapg.properties.billing_group_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["qr_code"]) -> typing.Union['QrCode', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["use_type"]) -> 'LtrUseType': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["fsc"]) -> typing.Union[MetaOapg.properties.fsc, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union['LtrSize', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["file", "extra_service", "cards", "mail_type", "color", "double_sided", "address_placement", "return_envelope", "perforated_page", "custom_envelope", "billing_group_id", "qr_code", "use_type", "fsc", "size", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                use_type: 'LtrUseType',
                file: 'LtrFile',
                color: typing.Union[MetaOapg.properties.color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                to: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                extra_service: typing.Union['ExtraService', schemas.Unset] = schemas.unset,
                cards: typing.Union[MetaOapg.properties.cards, list, tuple, None, schemas.Unset] = schemas.unset,
                mail_type: typing.Union['MailType', schemas.Unset] = schemas.unset,
                double_sided: typing.Union[MetaOapg.properties.double_sided, bool, schemas.Unset] = schemas.unset,
                address_placement: typing.Union['AddressPlacement', schemas.Unset] = schemas.unset,
                return_envelope: typing.Union['ReturnEnvelopeUserProvided', schemas.Unset] = schemas.unset,
                perforated_page: typing.Union[MetaOapg.properties.perforated_page, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                custom_envelope: typing.Union['UserProvided', schemas.Unset] = schemas.unset,
                billing_group_id: typing.Union[MetaOapg.properties.billing_group_id, str, schemas.Unset] = schemas.unset,
                qr_code: typing.Union['QrCode', schemas.Unset] = schemas.unset,
                fsc: typing.Union[MetaOapg.properties.fsc, bool, schemas.Unset] = schemas.unset,
                size: typing.Union['LtrSize', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *args,
                    use_type=use_type,
                    file=file,
                    color=color,
                    to=to,
                    extra_service=extra_service,
                    cards=cards,
                    mail_type=mail_type,
                    double_sided=double_sided,
                    address_placement=address_placement,
                    return_envelope=return_envelope,
                    perforated_page=perforated_page,
                    custom_envelope=custom_envelope,
                    billing_group_id=billing_group_id,
                    qr_code=qr_code,
                    fsc=fsc,
                    size=size,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                InputTo,
                InputFrom,
                Editable,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LetterEditable':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.address_placement import AddressPlacement
from lob_python_sdk.model.card_id import CardId
from lob_python_sdk.model.editable import Editable
from lob_python_sdk.model.extra_service import ExtraService
from lob_python_sdk.model.input_from import InputFrom
from lob_python_sdk.model.input_to import InputTo
from lob_python_sdk.model.ltr_file import LtrFile
from lob_python_sdk.model.ltr_size import LtrSize
from lob_python_sdk.model.ltr_use_type import LtrUseType
from lob_python_sdk.model.mail_type import MailType
from lob_python_sdk.model.qr_code import QrCode
from lob_python_sdk.model.return_envelope_user_provided import ReturnEnvelopeUserProvided
from lob_python_sdk.model.user_provided import UserProvided
