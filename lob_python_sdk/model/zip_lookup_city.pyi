# coding: utf-8

"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 

    The version of the OpenAPI document: 1.19.28
    Contact: lob-openapi@lob.com
    Created by: https://support.lob.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lob_python_sdk import schemas  # noqa: F401


class ZipLookupCity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "county_fips",
            "city",
            "county",
            "state",
            "preferred",
        }
        
        class properties:
        
            @staticmethod
            def city() -> typing.Type['City']:
                return City
        
            @staticmethod
            def state() -> typing.Type['State']:
                return State
            county = schemas.StrSchema
        
            @staticmethod
            def county_fips() -> typing.Type['CountyFips']:
                return CountyFips
            preferred = schemas.BoolSchema
            __annotations__ = {
                "city": city,
                "state": state,
                "county": county,
                "county_fips": county_fips,
                "preferred": preferred,
            }
    
    county_fips: 'CountyFips'
    city: 'City'
    county: MetaOapg.properties.county
    state: 'State'
    preferred: MetaOapg.properties.preferred
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> 'City': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county_fips"]) -> 'CountyFips': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred"]) -> MetaOapg.properties.preferred: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["city", "state", "county", "county_fips", "preferred", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> 'City': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county_fips"]) -> 'CountyFips': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred"]) -> MetaOapg.properties.preferred: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["city", "state", "county", "county_fips", "preferred", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        county_fips: 'CountyFips',
        city: 'City',
        county: typing.Union[MetaOapg.properties.county, str, ],
        state: 'State',
        preferred: typing.Union[MetaOapg.properties.preferred, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ZipLookupCity':
        return super().__new__(
            cls,
            *args,
            county_fips=county_fips,
            city=city,
            county=county,
            state=state,
            preferred=preferred,
            _configuration=_configuration,
            **kwargs,
        )

from lob_python_sdk.model.city import City
from lob_python_sdk.model.county_fips import CountyFips
from lob_python_sdk.model.state import State
